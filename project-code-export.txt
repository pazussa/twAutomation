================================================================================
AutoLoop Twilio con Playwright (TypeScript) - Código Fuente Completo
================================================================================
Generado el: vie 19 sep 2025 22:38:30 -05
Directorio: /home/user/newautomwpp/2

================================================================================
ESTRUCTURA DEL PROYECTO
================================================================================

./.env.example
./extract-code.sh
./package.json
./package-lock.json
./playwright.config.ts
./README.md
./test-results/conversations/Crear_cultivo_-_Todos_los_intents.timedOut.html
./test-results/conversations/index.html
./test-results/.last-run.json
./tests/asignar_precios_producto.spec.ts
./tests/consultar_campos.spec.ts
./tests/consultar_distribucion_cultivos.spec.ts
./tests/consultar_trabajos_hoy.spec.ts
./tests/consultar_trabajos.spec.ts
./tests/conversation-reporter.ts
./tests/crear_campana.spec.ts
./tests/crear_cultivo.spec.ts
./tests/crear_fertilizante.spec.ts
./tests/crear_fitosanitario.spec.ts
./tests/.env
./tests/listar_cultivos.spec.ts
./tests/listar_fertilizantes.spec.ts
./tests/listar_fitosanitarios.spec.ts
./tests/_setup.ts
./tsconfig.json
./.vscode/tasks.json

================================================================================
ARCHIVOS DEL PROYECTO
================================================================================

────────────────────────────────────────────────────────────────────────────────
ARCHIVO: ./.env.example
────────────────────────────────────────────────────────────────────────────────

# Contacto de WhatsApp (Twilio)
CONTACT_NAME=Twilio
# Alternativas reconocidas automáticamente: Twilio, "+1 (415) 523-8886", 14155238886

# Navegador
HEADLESS=false
SESSION_DIR=~/.wapp-autoloop-session

# Conjunto de comandos (idénticos al proyecto original)
CMD_LISTAR=listar cultivos
CMD_CREAR=crear cultivo
CMD_LISTAR_FERT=listar fertilizantes
CMD_CREAR_FERT=crear fertilizante
CMD_LISTAR_FITO=Listar productos químicos
CMD_CREAR_FITO=crear fitosanitario
CMD_CONSULTAR_CAMPOS=Consultar campos sin planificar
CMD_CONSULTAR_DISTRIBUCION=Consultar distribución cultivos
CMD_CREAR_CAMPANA=Crear campaña
CMD_CONSULTAR_TRABAJOS=Consultar trabajos
CMD_CONSULTAR_TRABAJOS_HOY=Consultar trabajos (hoy)
CMD_ASIGNAR_PRECIOS_PRODUCTO=Asignar precios producto
NOMBRE_BASE=Cultivo

# Comportamiento
# "Ya existe" SIEMPRE se considera error en el flujo y como FAIL en el reporte.
# (Esta variable ya no afecta a la lógica, pero la dejamos documentada.)
TREAT_EXISTS_AS_OK=false

# ===== Intents por flujo (opcional; si no los defines, se usan los defaults del código) =====
# Formato: JSON (["a","b"]) o separado por barras (a|b|c)
INTENTS_CREAR_CULTIVO=["crear cultivo","añadir cultivo"]
INTENTS_LISTAR_CULTIVOS=listar cultivos|dame la lista de cultivos|listar cultivos variedad {variedad}

# Placeholders
VAR_VARIEDAD=p 8660


────────────────────────────────────────────────────────────────────────────────
ARCHIVO: ./package.json
────────────────────────────────────────────────────────────────────────────────

{
  "name": "autoloop-twilio-playwright",
  "version": "0.1.0",
  "private": true,
  "type": "module",
  "scripts": {
    "build": "tsc",
    "typecheck": "tsc --noEmit",
    "playwright:install": "playwright install",
    "pw": "playwright test",
    "pw:select": "playwright test",
    "pw:report": "playwright show-report"
  },
  "dependencies": {
    "dotenv": "^16.4.5",
    "playwright": "^1.55.0"
  },
  "devDependencies": {
    "@playwright/test": "^1.55.0",
    "ts-node": "^10.9.2",
    "typescript": "^5.9.2"
  }
}

────────────────────────────────────────────────────────────────────────────────
ARCHIVO: ./package-lock.json
────────────────────────────────────────────────────────────────────────────────

{
  "name": "autoloop-twilio-playwright",
  "version": "0.1.0",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "name": "autoloop-twilio-playwright",
      "version": "0.1.0",
      "dependencies": {
        "dotenv": "^16.4.5",
        "playwright": "^1.55.0"
      },
      "devDependencies": {
        "@playwright/test": "^1.55.0",
        "ts-node": "^10.9.2",
        "typescript": "^5.9.2"
      }
    },
    "node_modules/@cspotcode/source-map-support": {
      "version": "0.8.1",
      "resolved": "https://registry.npmjs.org/@cspotcode/source-map-support/-/source-map-support-0.8.1.tgz",
      "integrity": "sha512-IchNf6dN4tHoMFIn/7OE8LWZ19Y6q/67Bmf6vnGREv8RSbBVb9LPJxEcnwrcwX6ixSvaiGoomAUvu4YSxXrVgw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/trace-mapping": "0.3.9"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@jridgewell/resolve-uri": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.2.tgz",
      "integrity": "sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/sourcemap-codec": {
      "version": "1.5.5",
      "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.5.5.tgz",
      "integrity": "sha512-cYQ9310grqxueWbl+WuIUIaiUaDcj7WOq5fVhEljNVgRfOUhY9fy2zTvfoqWsnebh8Sl70VScFbICvJnLKB0Og==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@jridgewell/trace-mapping": {
      "version": "0.3.9",
      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.9.tgz",
      "integrity": "sha512-3Belt6tdc8bPgAtbcmdtNJlirVoTmEb5e2gC94PnkwEW9jI6CAHUeoG85tjWP5WquqfavoMtMwiG4P926ZKKuQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/resolve-uri": "^3.0.3",
        "@jridgewell/sourcemap-codec": "^1.4.10"
      }
    },
    "node_modules/@playwright/test": {
      "version": "1.55.0",
      "resolved": "https://registry.npmjs.org/@playwright/test/-/test-1.55.0.tgz",
      "integrity": "sha512-04IXzPwHrW69XusN/SIdDdKZBzMfOT9UNT/YiJit/xpy2VuAoB8NHc8Aplb96zsWDddLnbkPL3TsmrS04ZU2xQ==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "playwright": "1.55.0"
      },
      "bin": {
        "playwright": "cli.js"
      },
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@tsconfig/node10": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/@tsconfig/node10/-/node10-1.0.11.tgz",
      "integrity": "sha512-DcRjDCujK/kCk/cUe8Xz8ZSpm8mS3mNNpta+jGCA6USEDfktlNvm1+IuZ9eTcDbNk41BHwpHHeW+N1lKCz4zOw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@tsconfig/node12": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/@tsconfig/node12/-/node12-1.0.11.tgz",
      "integrity": "sha512-cqefuRsh12pWyGsIoBKJA9luFu3mRxCA+ORZvA4ktLSzIuCUtWVxGIuXigEwO5/ywWFMZ2QEGKWvkZG1zDMTag==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@tsconfig/node14": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/@tsconfig/node14/-/node14-1.0.3.tgz",
      "integrity": "sha512-ysT8mhdixWK6Hw3i1V2AeRqZ5WfXg1G43mqoYlM2nc6388Fq5jcXyr5mRsqViLx/GJYdoL0bfXD8nmF+Zn/Iow==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@tsconfig/node16": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/@tsconfig/node16/-/node16-1.0.4.tgz",
      "integrity": "sha512-vxhUy4J8lyeyinH7Azl1pdd43GJhZH/tP2weN8TntQblOY+A0XbT8DJk1/oCPuOOyg/Ja757rG0CgHcWC8OfMA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/node": {
      "version": "24.5.2",
      "resolved": "https://registry.npmjs.org/@types/node/-/node-24.5.2.tgz",
      "integrity": "sha512-FYxk1I7wPv3K2XBaoyH2cTnocQEu8AOZ60hPbsyukMPLv5/5qr7V1i8PLHdl6Zf87I+xZXFvPCXYjiTFq+YSDQ==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "undici-types": "~7.12.0"
      }
    },
    "node_modules/acorn": {
      "version": "8.15.0",
      "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.15.0.tgz",
      "integrity": "sha512-NZyJarBfL7nWwIq+FDL6Zp/yHEhePMNnnJ0y3qfieCrmNvYct8uvtiV41UvlSe6apAfk0fY1FbWx+NwfmpvtTg==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "acorn": "bin/acorn"
      },
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/acorn-walk": {
      "version": "8.3.4",
      "resolved": "https://registry.npmjs.org/acorn-walk/-/acorn-walk-8.3.4.tgz",
      "integrity": "sha512-ueEepnujpqee2o5aIYnvHU6C0A42MNdsIDeqy5BydrkuC5R1ZuUFnm27EeFJGoEHJQgn3uleRvmTXaJgfXbt4g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "acorn": "^8.11.0"
      },
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/arg": {
      "version": "4.1.3",
      "resolved": "https://registry.npmjs.org/arg/-/arg-4.1.3.tgz",
      "integrity": "sha512-58S9QDqG0Xx27YwPSt9fJxivjYl432YCwfDMfZ+71RAqUrZef7LrKQZ3LHLOwCS4FLNBplP533Zx895SeOCHvA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/create-require": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/create-require/-/create-require-1.1.1.tgz",
      "integrity": "sha512-dcKFX3jn0MpIaXjisoRvexIJVEKzaq7z2rZKxf+MSr9TkdmHmsU4m2lcLojrj/FHl8mk5VxMmYA+ftRkP/3oKQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/diff": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/diff/-/diff-4.0.2.tgz",
      "integrity": "sha512-58lmxKSA4BNyLz+HHMUzlOEpg09FV+ev6ZMe3vJihgdxzgcwZ8VoEEPmALCZG9LmqfVoNMMKpttIYTVG6uDY7A==",
      "dev": true,
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.3.1"
      }
    },
    "node_modules/dotenv": {
      "version": "16.6.1",
      "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-16.6.1.tgz",
      "integrity": "sha512-uBq4egWHTcTt33a72vpSG0z3HnPuIl6NqYcTrKEg2azoEyl2hpW0zqlxysq2pK9HlDIHyHyakeYaYnSAwd8bow==",
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://dotenvx.com"
      }
    },
    "node_modules/fsevents": {
      "version": "2.3.2",
      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.2.tgz",
      "integrity": "sha512-xiqMQR4xAeHTuB9uWm+fFRcIOgKBMiOBP+eXiyT7jsgVCq1bkVygt00oASowB7EdtpOHaaPgKt812P9ab+DDKA==",
      "hasInstallScript": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
      }
    },
    "node_modules/make-error": {
      "version": "1.3.6",
      "resolved": "https://registry.npmjs.org/make-error/-/make-error-1.3.6.tgz",
      "integrity": "sha512-s8UhlNe7vPKomQhC1qFelMokr/Sc3AgNbso3n74mVPA5LTZwkB9NlXf4XPamLxJE8h0gh73rM94xvwRT2CVInw==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/playwright": {
      "version": "1.55.0",
      "resolved": "https://registry.npmjs.org/playwright/-/playwright-1.55.0.tgz",
      "integrity": "sha512-sdCWStblvV1YU909Xqx0DhOjPZE4/5lJsIS84IfN9dAZfcl/CIZ5O8l3o0j7hPMjDvqoTF8ZUcc+i/GL5erstA==",
      "license": "Apache-2.0",
      "dependencies": {
        "playwright-core": "1.55.0"
      },
      "bin": {
        "playwright": "cli.js"
      },
      "engines": {
        "node": ">=18"
      },
      "optionalDependencies": {
        "fsevents": "2.3.2"
      }
    },
    "node_modules/playwright-core": {
      "version": "1.55.0",
      "resolved": "https://registry.npmjs.org/playwright-core/-/playwright-core-1.55.0.tgz",
      "integrity": "sha512-GvZs4vU3U5ro2nZpeiwyb0zuFaqb9sUiAJuyrWpcGouD8y9/HLgGbNRjIph7zU9D3hnPaisMl9zG9CgFi/biIg==",
      "license": "Apache-2.0",
      "bin": {
        "playwright-core": "cli.js"
      },
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/ts-node": {
      "version": "10.9.2",
      "resolved": "https://registry.npmjs.org/ts-node/-/ts-node-10.9.2.tgz",
      "integrity": "sha512-f0FFpIdcHgn8zcPSbf1dRevwt047YMnaiJM3u2w2RewrB+fob/zePZcrOyQoLMMO7aBIddLcQIEK5dYjkLnGrQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@cspotcode/source-map-support": "^0.8.0",
        "@tsconfig/node10": "^1.0.7",
        "@tsconfig/node12": "^1.0.7",
        "@tsconfig/node14": "^1.0.0",
        "@tsconfig/node16": "^1.0.2",
        "acorn": "^8.4.1",
        "acorn-walk": "^8.1.1",
        "arg": "^4.1.0",
        "create-require": "^1.1.0",
        "diff": "^4.0.1",
        "make-error": "^1.1.1",
        "v8-compile-cache-lib": "^3.0.1",
        "yn": "3.1.1"
      },
      "bin": {
        "ts-node": "dist/bin.js",
        "ts-node-cwd": "dist/bin-cwd.js",
        "ts-node-esm": "dist/bin-esm.js",
        "ts-node-script": "dist/bin-script.js",
        "ts-node-transpile-only": "dist/bin-transpile.js",
        "ts-script": "dist/bin-script-deprecated.js"
      },
      "peerDependencies": {
        "@swc/core": ">=1.2.50",
        "@swc/wasm": ">=1.2.50",
        "@types/node": "*",
        "typescript": ">=2.7"
      },
      "peerDependenciesMeta": {
        "@swc/core": {
          "optional": true
        },
        "@swc/wasm": {
          "optional": true
        }
      }
    },
    "node_modules/typescript": {
      "version": "5.9.2",
      "resolved": "https://registry.npmjs.org/typescript/-/typescript-5.9.2.tgz",
      "integrity": "sha512-CWBzXQrc/qOkhidw1OzBTQuYRbfyxDXJMVJ1XNwUHGROVmuaeiEm3OslpZ1RV96d7SKKjZKrSJu3+t/xlw3R9A==",
      "dev": true,
      "license": "Apache-2.0",
      "bin": {
        "tsc": "bin/tsc",
        "tsserver": "bin/tsserver"
      },
      "engines": {
        "node": ">=14.17"
      }
    },
    "node_modules/undici-types": {
      "version": "7.12.0",
      "resolved": "https://registry.npmjs.org/undici-types/-/undici-types-7.12.0.tgz",
      "integrity": "sha512-goOacqME2GYyOZZfb5Lgtu+1IDmAlAEu5xnD3+xTzS10hT0vzpf0SPjkXwAw9Jm+4n/mQGDP3LO8CPbYROeBfQ==",
      "dev": true,
      "license": "MIT",
      "peer": true
    },
    "node_modules/v8-compile-cache-lib": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/v8-compile-cache-lib/-/v8-compile-cache-lib-3.0.1.tgz",
      "integrity": "sha512-wa7YjyUGfNZngI/vtK0UHAN+lgDCxBPCylVXGp0zu59Fz5aiGtNXaq3DhIov063MorB+VfufLh3JlF2KdTK3xg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/yn": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/yn/-/yn-3.1.1.tgz",
      "integrity": "sha512-Ux4ygGWsu2c7isFWe8Yu1YluJmqVhxqK2cLXNQA5AcC3QfbGNpM7fu0Y8b/z16pXLnFxZYvWhd3fhBY9DLmC6Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    }
  }
}


────────────────────────────────────────────────────────────────────────────────
ARCHIVO: ./playwright.config.ts
────────────────────────────────────────────────────────────────────────────────

import { defineConfig } from '@playwright/test';

export default defineConfig({
  testDir: 'tests',
  timeout: 900_000, // Aumentado para permitir múltiples iteraciones
  expect: { timeout: 15_000 },
  // Para evitar colisiones en la misma sesión de WhatsApp:
  fullyParallel: false,
  workers: 1,
  // Reporter: lista en consola + HTML custom de conversación (pasos OK/FAIL)
  reporter: [
    ['list'],
    ['./tests/conversation-reporter.ts', { outputDir: 'test-results/conversations' }]
  ],
  use: {
    actionTimeout: 15_000,
    navigationTimeout: 20_000
  }
});


────────────────────────────────────────────────────────────────────────────────
ARCHIVO: ./README.md
────────────────────────────────────────────────────────────────────────────────

# AutoLoop Twilio con Playwright (TypeScript)

Proyecto mínimo que automatiza una conversación en WhatsApp Web con el contacto "Twilio" (sandbox), usando Playwright + TypeScript.

## Requisitos
- Node.js 18+
- Linux/macOS/Windows (en Linux puede requerir librerías extras de Playwright)

## Instalación
```bash
npm install
npm run playwright:install
cp .env.example .env
# Ajusta variables en .env si hace falta
```

## Ejecutar en modo desarrollo (TS directo)
```bash
npm run dev
```

## Construir y ejecutar JS compilado
```bash
npm run build
npm start
```

### ¿Qué hace?
1) Abre sesión persistente en WhatsApp Web.
2) Abre el chat Twilio y limpia el historial.
3) Toma un mensaje inicial aleatorio del dataset y lo envía.
4) En bucle: envía → espera primera respuesta → espera 3s → lee todos los mensajes nuevos → detecta palabras clave → responde según reglas.
5) Finaliza con **OK** o **ERROR** según palabras clave detectadas.

### Datasets
- **Mensajes de inicio**: lista de frases iniciales.
- **Reglas de palabras clave**: mapeos de regex → acción (responder, terminar OK, terminar ERROR).

Edita estas listas dentro de `src/autoLoop.ts` (bloques `STARTERS` y `KEYWORD_RULES`).

────────────────────────────────────────────────────────────────────────────────
ARCHIVO: ./test-results/conversations/Crear_cultivo_-_Todos_los_intents.timedOut.html
────────────────────────────────────────────────────────────────────────────────

<!doctype html>
<html lang="es">
<head>
<meta charset="utf-8"/>
<title>Crear cultivo - Todos los intents – TIMEDOUT</title>
<style>
  :root {
    --ok: #10b981;
    --fail: #ef4444;
    --send: #1d4ed8;
    --recv: #6b7280;
    --bg: #f8fafc;
    --card: #ffffff;
    --border: #e5e7eb;
  }
  html,body{background:var(--bg);}
  body{font-family:system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,Cantarell,Arial,sans-serif;margin:24px;color:#0f172a;}
  .card{background:var(--card);border:1px solid var(--border);border-radius:14px;box-shadow:0 1px 3px rgba(0,0,0,.05);padding:18px 20px;margin-bottom:18px;}
  h1{font-size:20px;margin:0 0 4px;}
  .meta{color:#475569;margin:0 0 12px;font-size:14px}
  .summary{display:flex;gap:12px;flex-wrap:wrap;margin:10px 0 0}
  .chip{border:1px solid var(--border);border-radius:999px;padding:6px 10px;font-size:13px;background:#fff}
  .chip.ok{border-color:var(--ok);color:var(--ok)}
  .chip.fail{border-color:var(--fail);color:var(--fail)}
  table{width:100%;border-collapse:collapse;margin-top:6px;font-size:14px}
  thead th{font-weight:600;text-align:left;color:#334155;border-bottom:1px solid var(--border);padding:8px}
  tbody td{border-top:1px solid var(--border);padding:8px;vertical-align:top}
  td.idx{width:44px;color:#64748b}
  td.tipo.send{color:var(--send);font-weight:600}
  td.tipo.recv{color:var(--recv);font-weight:600}
  td.tipo.intent{color:#7c3aed;font-weight:700}
  td.time{white-space:nowrap;color:#64748b}
  td.texto{white-space:pre-wrap;word-wrap:break-word}
  .badge{display:inline-block;border-radius:8px;padding:2px 8px;font-size:12px;border:1px solid}
  .badge.ok{border-color:var(--ok);color:var(--ok);background:rgba(16,185,129,.08)}
  .badge.fail{border-color:var(--fail);color:var(--fail);background:rgba(239,68,68,.08)}
  .intent-card{background:#fff;border:1px solid var(--border);border-radius:12px;padding:12px 14px;margin:14px 0}
  .intent-header{display:flex;justify-content:space-between;align-items:center;margin-bottom:6px}
  .intent-title{font-weight:700}
  .intent-sub{color:#64748b;font-weight:500;margin-left:6px}
  footer{margin-top:16px;color:#64748b;font-size:12px}
</style>
</head>
<body>
  <div class="card">
    <h1>Crear cultivo - Todos los intents</h1>
    <div class="meta">
      <div><strong>Status:</strong> timedOut</div>
      <div><strong>Duración:</strong> 900435 ms</div>
      <div><strong>Archivo:</strong> /home/user/newautomwpp/2/tests/crear_cultivo.spec.ts:3</div>
    </div>
    <div class="summary">
      <div class="chip">Eventos: 184</div>
      <div class="chip ok">OK: 177</div>
      <div class="chip fail">FAIL: 7</div>
      <div class="chip">Intents: 11</div>
    </div>
  </div>

  <div class="card">
    <h2 style="margin:0 0 8px;font-size:16px">Conversación por intent</h2>
    <div class="intent-card">
  <div class="intent-header">
    <div class="intent-title">[1/40] crear cultivo <span class="intent-sub">(1/40)</span></div>
    <div class="chip ok">OK</div>
  </div>
  <table>
    <thead><tr>
      <th>#</th><th>Tipo</th><th>Texto</th><th>Timestamp (UTC)</th><th>Resultado</th>
    </tr></thead>
    <tbody><tr>
  <td class="idx">1</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">crear cultivo</td>
  <td class="time">2025-09-20T03:12:34.655Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">2</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Nombre del cultivo.</td>
  <td class="time">2025-09-20T03:12:40.993Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">3</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">maíz</td>
  <td class="time">2025-09-20T03:12:40.999Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">4</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Nombre de la variedad.</td>
  <td class="time">2025-09-20T03:12:47.466Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">5</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">p 8660</td>
  <td class="time">2025-09-20T03:12:47.479Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">6</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Destino del cultivo.</td>
  <td class="time">2025-09-20T03:12:53.481Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">7</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">consumo</td>
  <td class="time">2025-09-20T03:12:53.494Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">8</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Marca del cultivo.</td>
  <td class="time">2025-09-20T03:12:59.076Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">9</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">marcax</td>
  <td class="time">2025-09-20T03:12:59.106Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">10</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Ya existe un cultivo con esta combinación de variedad, cliente, destino y marca..</td>
  <td class="time">2025-09-20T03:13:08.492Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">11</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">crear cultivo</td>
  <td class="time">2025-09-20T03:13:10.237Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">12</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Nombre del cultivo.</td>
  <td class="time">2025-09-20T03:13:16.234Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">13</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">maíz</td>
  <td class="time">2025-09-20T03:13:16.238Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">14</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Nombre de la variedad.</td>
  <td class="time">2025-09-20T03:13:21.649Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">15</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">p 8660</td>
  <td class="time">2025-09-20T03:13:21.658Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">16</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Destino del cultivo.</td>
  <td class="time">2025-09-20T03:13:26.901Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">17</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">consumo</td>
  <td class="time">2025-09-20T03:13:26.905Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">18</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Marca del cultivo.</td>
  <td class="time">2025-09-20T03:13:32.530Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">19</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">Yucasol-1h8j8f2s</td>
  <td class="time">2025-09-20T03:13:32.536Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">20</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Cultivo creado exitosamente..</td>
  <td class="time">2025-09-20T03:13:42.677Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr></tbody>
  </table>
</div>
<div class="intent-card">
  <div class="intent-header">
    <div class="intent-title">[2/40] añadir cultivo <span class="intent-sub">(2/40)</span></div>
    <div class="chip ok">OK</div>
  </div>
  <table>
    <thead><tr>
      <th>#</th><th>Tipo</th><th>Texto</th><th>Timestamp (UTC)</th><th>Resultado</th>
    </tr></thead>
    <tbody><tr>
  <td class="idx">1</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">añadir cultivo</td>
  <td class="time">2025-09-20T03:13:45.528Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">2</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Nombre del cultivo.</td>
  <td class="time">2025-09-20T03:13:51.794Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">3</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">maíz</td>
  <td class="time">2025-09-20T03:13:51.801Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">4</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Nombre de la variedad.</td>
  <td class="time">2025-09-20T03:13:59.185Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">5</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">p 8660</td>
  <td class="time">2025-09-20T03:13:59.190Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">6</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Destino del cultivo.</td>
  <td class="time">2025-09-20T03:14:04.270Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">7</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">consumo</td>
  <td class="time">2025-09-20T03:14:04.279Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">8</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Marca del cultivo.</td>
  <td class="time">2025-09-20T03:14:09.576Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">9</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">marcax</td>
  <td class="time">2025-09-20T03:14:09.585Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">10</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Ya existe un cultivo con esta combinación de variedad, cliente, destino y marca..</td>
  <td class="time">2025-09-20T03:14:18.842Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">11</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">añadir cultivo</td>
  <td class="time">2025-09-20T03:14:20.647Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">12</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Nombre del cultivo.</td>
  <td class="time">2025-09-20T03:14:27.323Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">13</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">maíz</td>
  <td class="time">2025-09-20T03:14:27.330Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">14</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Nombre de la variedad.</td>
  <td class="time">2025-09-20T03:14:32.812Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">15</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">p 8660</td>
  <td class="time">2025-09-20T03:14:32.822Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">16</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Destino del cultivo.</td>
  <td class="time">2025-09-20T03:14:38.468Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">17</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">consumo</td>
  <td class="time">2025-09-20T03:14:38.473Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">18</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Marca del cultivo.</td>
  <td class="time">2025-09-20T03:14:43.845Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">19</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">Yucasol-oqigwxcs</td>
  <td class="time">2025-09-20T03:14:43.850Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">20</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Cultivo creado exitosamente..</td>
  <td class="time">2025-09-20T03:14:53.676Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr></tbody>
  </table>
</div>
<div class="intent-card">
  <div class="intent-header">
    <div class="intent-title">[3/40] quiero crear un cultivo <span class="intent-sub">(3/40)</span></div>
    <div class="chip fail">FAIL</div>
  </div>
  <table>
    <thead><tr>
      <th>#</th><th>Tipo</th><th>Texto</th><th>Timestamp (UTC)</th><th>Resultado</th>
    </tr></thead>
    <tbody><tr>
  <td class="idx">1</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">quiero crear un cultivo</td>
  <td class="time">2025-09-20T03:14:57.894Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">2</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Nombre del cultivo.</td>
  <td class="time">2025-09-20T03:15:04.581Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">3</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">maíz</td>
  <td class="time">2025-09-20T03:15:04.590Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">4</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Sin respuesta tras 45s</td>
  <td class="time">2025-09-20T03:15:52.347Z</td>
  <td class="estado"><span class="badge fail">FAIL</span></td>
</tr>
<tr>
  <td class="idx">5</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">cancelar</td>
  <td class="time">2025-09-20T03:15:52.347Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr></tbody>
  </table>
</div>
<div class="intent-card">
  <div class="intent-header">
    <div class="intent-title">[4/40] quiero registrar un cultivo <span class="intent-sub">(4/40)</span></div>
    <div class="chip fail">FAIL</div>
  </div>
  <table>
    <thead><tr>
      <th>#</th><th>Tipo</th><th>Texto</th><th>Timestamp (UTC)</th><th>Resultado</th>
    </tr></thead>
    <tbody><tr>
  <td class="idx">1</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">quiero registrar un cultivo</td>
  <td class="time">2025-09-20T03:15:56.953Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">2</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Operación cancelada..</td>
  <td class="time">2025-09-20T03:15:58.765Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">3</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Nombre del cultivo.</td>
  <td class="time">2025-09-20T03:16:03.899Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">4</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">maíz</td>
  <td class="time">2025-09-20T03:16:03.906Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">5</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Nombre de la variedad.</td>
  <td class="time">2025-09-20T03:16:09.955Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">6</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">p 8660</td>
  <td class="time">2025-09-20T03:16:09.963Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">7</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Destino del cultivo.</td>
  <td class="time">2025-09-20T03:16:15.535Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">8</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">consumo</td>
  <td class="time">2025-09-20T03:16:15.541Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">9</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Marca del cultivo.</td>
  <td class="time">2025-09-20T03:16:21.139Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">10</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">marcax</td>
  <td class="time">2025-09-20T03:16:21.143Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">11</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Ya existe un cultivo con esta combinación de variedad, cliente, destino y marca..</td>
  <td class="time">2025-09-20T03:16:29.810Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">12</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">quiero registrar un cultivo</td>
  <td class="time">2025-09-20T03:16:31.276Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">13</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Nombre del cultivo.</td>
  <td class="time">2025-09-20T03:16:37.951Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">14</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">maíz</td>
  <td class="time">2025-09-20T03:16:37.962Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">15</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Nombre de la variedad.</td>
  <td class="time">2025-09-20T03:16:44.601Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">16</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">p 8660</td>
  <td class="time">2025-09-20T03:16:44.662Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">17</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Sin respuesta tras 45s</td>
  <td class="time">2025-09-20T03:17:32.897Z</td>
  <td class="estado"><span class="badge fail">FAIL</span></td>
</tr>
<tr>
  <td class="idx">18</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">cancelar</td>
  <td class="time">2025-09-20T03:17:32.898Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr></tbody>
  </table>
</div>
<div class="intent-card">
  <div class="intent-header">
    <div class="intent-title">[5/40] registrar cultivo <span class="intent-sub">(5/40)</span></div>
    <div class="chip fail">FAIL</div>
  </div>
  <table>
    <thead><tr>
      <th>#</th><th>Tipo</th><th>Texto</th><th>Timestamp (UTC)</th><th>Resultado</th>
    </tr></thead>
    <tbody><tr>
  <td class="idx">1</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">registrar cultivo</td>
  <td class="time">2025-09-20T03:17:38.886Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">2</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Operación cancelada..</td>
  <td class="time">2025-09-20T03:17:44.817Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">3</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Nombre del cultivo.</td>
  <td class="time">2025-09-20T03:17:50.962Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">4</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">maíz</td>
  <td class="time">2025-09-20T03:17:51.131Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">5</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Nombre de la variedad.</td>
  <td class="time">2025-09-20T03:17:59.129Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">6</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">p 8660</td>
  <td class="time">2025-09-20T03:17:59.158Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">7</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Destino del cultivo.</td>
  <td class="time">2025-09-20T03:18:10.435Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">8</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">consumo</td>
  <td class="time">2025-09-20T03:18:10.467Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">9</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Marca del cultivo.</td>
  <td class="time">2025-09-20T03:18:17.971Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">10</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">marcax</td>
  <td class="time">2025-09-20T03:18:18.014Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">11</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Ya existe un cultivo con esta combinación de variedad, cliente, destino y marca..</td>
  <td class="time">2025-09-20T03:18:27.766Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">12</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">registrar cultivo</td>
  <td class="time">2025-09-20T03:18:31.662Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">13</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Sin respuesta tras 45s</td>
  <td class="time">2025-09-20T03:19:21.840Z</td>
  <td class="estado"><span class="badge fail">FAIL</span></td>
</tr>
<tr>
  <td class="idx">14</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">cancelar</td>
  <td class="time">2025-09-20T03:19:21.840Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr></tbody>
  </table>
</div>
<div class="intent-card">
  <div class="intent-header">
    <div class="intent-title">[6/40] necesito crear un cultivo <span class="intent-sub">(6/40)</span></div>
    <div class="chip ok">OK</div>
  </div>
  <table>
    <thead><tr>
      <th>#</th><th>Tipo</th><th>Texto</th><th>Timestamp (UTC)</th><th>Resultado</th>
    </tr></thead>
    <tbody><tr>
  <td class="idx">1</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">necesito crear un cultivo</td>
  <td class="time">2025-09-20T03:19:26.435Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">2</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Operación cancelada..</td>
  <td class="time">2025-09-20T03:19:28.558Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">3</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Nombre del cultivo.</td>
  <td class="time">2025-09-20T03:19:33.954Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">4</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">maíz</td>
  <td class="time">2025-09-20T03:19:33.959Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">5</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Nombre de la variedad.</td>
  <td class="time">2025-09-20T03:19:39.423Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">6</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">p 8660</td>
  <td class="time">2025-09-20T03:19:39.430Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">7</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Destino del cultivo.</td>
  <td class="time">2025-09-20T03:19:44.973Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">8</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">consumo</td>
  <td class="time">2025-09-20T03:19:44.986Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">9</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Marca del cultivo.</td>
  <td class="time">2025-09-20T03:19:50.843Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">10</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">marcax</td>
  <td class="time">2025-09-20T03:19:50.850Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">11</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Ya existe un cultivo con esta combinación de variedad, cliente, destino y marca..</td>
  <td class="time">2025-09-20T03:19:59.532Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">12</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">necesito crear un cultivo</td>
  <td class="time">2025-09-20T03:20:00.928Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">13</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Nombre del cultivo.</td>
  <td class="time">2025-09-20T03:20:08.348Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">14</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">maíz</td>
  <td class="time">2025-09-20T03:20:08.369Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">15</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Nombre de la variedad.</td>
  <td class="time">2025-09-20T03:20:14.098Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">16</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">p 8660</td>
  <td class="time">2025-09-20T03:20:14.105Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">17</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Destino del cultivo.</td>
  <td class="time">2025-09-20T03:20:19.690Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">18</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">consumo</td>
  <td class="time">2025-09-20T03:20:19.707Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">19</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Marca del cultivo.</td>
  <td class="time">2025-09-20T03:20:25.228Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">20</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">Yucasol-m0anm88f</td>
  <td class="time">2025-09-20T03:20:25.234Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">21</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Cultivo creado exitosamente..</td>
  <td class="time">2025-09-20T03:20:35.629Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr></tbody>
  </table>
</div>
<div class="intent-card">
  <div class="intent-header">
    <div class="intent-title">[7/40] crear un nuevo cultivo <span class="intent-sub">(7/40)</span></div>
    <div class="chip fail">FAIL</div>
  </div>
  <table>
    <thead><tr>
      <th>#</th><th>Tipo</th><th>Texto</th><th>Timestamp (UTC)</th><th>Resultado</th>
    </tr></thead>
    <tbody><tr>
  <td class="idx">1</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">crear un nuevo cultivo</td>
  <td class="time">2025-09-20T03:20:38.499Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">2</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Nombre del cultivo.</td>
  <td class="time">2025-09-20T03:20:45.005Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">3</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">maíz</td>
  <td class="time">2025-09-20T03:20:45.010Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">4</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Nombre de la variedad.</td>
  <td class="time">2025-09-20T03:20:50.508Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">5</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">p 8660</td>
  <td class="time">2025-09-20T03:20:50.513Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">6</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Sin respuesta tras 45s</td>
  <td class="time">2025-09-20T03:21:38.279Z</td>
  <td class="estado"><span class="badge fail">FAIL</span></td>
</tr>
<tr>
  <td class="idx">7</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">cancelar</td>
  <td class="time">2025-09-20T03:21:38.279Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr></tbody>
  </table>
</div>
<div class="intent-card">
  <div class="intent-header">
    <div class="intent-title">[8/40] quiero dar de alta un cultivo <span class="intent-sub">(8/40)</span></div>
    <div class="chip fail">FAIL</div>
  </div>
  <table>
    <thead><tr>
      <th>#</th><th>Tipo</th><th>Texto</th><th>Timestamp (UTC)</th><th>Resultado</th>
    </tr></thead>
    <tbody><tr>
  <td class="idx">1</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">quiero dar de alta un cultivo</td>
  <td class="time">2025-09-20T03:21:42.839Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">2</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Operación cancelada..</td>
  <td class="time">2025-09-20T03:21:44.803Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">3</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Nombre del cultivo.</td>
  <td class="time">2025-09-20T03:21:49.492Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">4</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">maíz</td>
  <td class="time">2025-09-20T03:21:49.496Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">5</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Nombre de la variedad.</td>
  <td class="time">2025-09-20T03:21:54.725Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">6</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">p 8660</td>
  <td class="time">2025-09-20T03:21:54.729Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">7</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Destino del cultivo.</td>
  <td class="time">2025-09-20T03:22:00.224Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">8</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">consumo</td>
  <td class="time">2025-09-20T03:22:00.231Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">9</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Marca del cultivo.</td>
  <td class="time">2025-09-20T03:22:05.959Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">10</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">marcax</td>
  <td class="time">2025-09-20T03:22:05.965Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">11</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Ya existe un cultivo con esta combinación de variedad, cliente, destino y marca..</td>
  <td class="time">2025-09-20T03:22:15.064Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">12</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">quiero dar de alta un cultivo</td>
  <td class="time">2025-09-20T03:22:16.396Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">13</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Nombre del cultivo.</td>
  <td class="time">2025-09-20T03:22:23.002Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">14</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">maíz</td>
  <td class="time">2025-09-20T03:22:23.006Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">15</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Sin respuesta tras 45s</td>
  <td class="time">2025-09-20T03:23:10.874Z</td>
  <td class="estado"><span class="badge fail">FAIL</span></td>
</tr>
<tr>
  <td class="idx">16</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">cancelar</td>
  <td class="time">2025-09-20T03:23:10.874Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr></tbody>
  </table>
</div>
<div class="intent-card">
  <div class="intent-header">
    <div class="intent-title">[9/40] agrega un cultivo <span class="intent-sub">(9/40)</span></div>
    <div class="chip fail">FAIL</div>
  </div>
  <table>
    <thead><tr>
      <th>#</th><th>Tipo</th><th>Texto</th><th>Timestamp (UTC)</th><th>Resultado</th>
    </tr></thead>
    <tbody><tr>
  <td class="idx">1</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">agrega un cultivo</td>
  <td class="time">2025-09-20T03:23:15.326Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">2</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Operación cancelada..</td>
  <td class="time">2025-09-20T03:23:17.253Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">3</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Nombre del cultivo.</td>
  <td class="time">2025-09-20T03:23:22.415Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">4</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">maíz</td>
  <td class="time">2025-09-20T03:23:22.423Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">5</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Nombre de la variedad.</td>
  <td class="time">2025-09-20T03:23:27.687Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">6</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">p 8660</td>
  <td class="time">2025-09-20T03:23:27.691Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">7</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Destino del cultivo.</td>
  <td class="time">2025-09-20T03:23:33.607Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">8</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">consumo</td>
  <td class="time">2025-09-20T03:23:33.613Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">9</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Marca del cultivo.</td>
  <td class="time">2025-09-20T03:23:39.156Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">10</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">marcax</td>
  <td class="time">2025-09-20T03:23:39.164Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">11</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Ya existe un cultivo con esta combinación de variedad, cliente, destino y marca..</td>
  <td class="time">2025-09-20T03:23:47.834Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">12</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">agrega un cultivo</td>
  <td class="time">2025-09-20T03:23:49.180Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">13</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Nombre del cultivo.</td>
  <td class="time">2025-09-20T03:23:56.395Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">14</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">maíz</td>
  <td class="time">2025-09-20T03:23:56.399Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">15</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Nombre de la variedad.</td>
  <td class="time">2025-09-20T03:24:02.275Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">16</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">p 8660</td>
  <td class="time">2025-09-20T03:24:02.296Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">17</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Sin respuesta tras 45s</td>
  <td class="time">2025-09-20T03:24:50.054Z</td>
  <td class="estado"><span class="badge fail">FAIL</span></td>
</tr>
<tr>
  <td class="idx">18</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">cancelar</td>
  <td class="time">2025-09-20T03:24:50.054Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr></tbody>
  </table>
</div>
<div class="intent-card">
  <div class="intent-header">
    <div class="intent-title">[10/40] agrega un nuevo cultivo <span class="intent-sub">(10/40)</span></div>
    <div class="chip fail">FAIL</div>
  </div>
  <table>
    <thead><tr>
      <th>#</th><th>Tipo</th><th>Texto</th><th>Timestamp (UTC)</th><th>Resultado</th>
    </tr></thead>
    <tbody><tr>
  <td class="idx">1</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">agrega un nuevo cultivo</td>
  <td class="time">2025-09-20T03:24:54.530Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">2</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Operación cancelada..</td>
  <td class="time">2025-09-20T03:24:56.367Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">3</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Nombre del cultivo.</td>
  <td class="time">2025-09-20T03:25:01.308Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">4</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">maíz</td>
  <td class="time">2025-09-20T03:25:01.312Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">5</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Nombre de la variedad.</td>
  <td class="time">2025-09-20T03:25:06.542Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">6</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">p 8660</td>
  <td class="time">2025-09-20T03:25:06.546Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">7</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Destino del cultivo.</td>
  <td class="time">2025-09-20T03:25:12.052Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">8</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">consumo</td>
  <td class="time">2025-09-20T03:25:12.058Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">9</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Marca del cultivo.</td>
  <td class="time">2025-09-20T03:25:18.033Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">10</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">marcax</td>
  <td class="time">2025-09-20T03:25:18.061Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">11</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Ya existe un cultivo con esta combinación de variedad, cliente, destino y marca..</td>
  <td class="time">2025-09-20T03:25:26.823Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">12</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">agrega un nuevo cultivo</td>
  <td class="time">2025-09-20T03:25:28.190Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">13</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Nombre del cultivo.</td>
  <td class="time">2025-09-20T03:25:35.492Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">14</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">maíz</td>
  <td class="time">2025-09-20T03:25:35.496Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">15</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Nombre de la variedad.</td>
  <td class="time">2025-09-20T03:25:40.709Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">16</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">p 8660</td>
  <td class="time">2025-09-20T03:25:40.716Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">17</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Sin respuesta tras 45s</td>
  <td class="time">2025-09-20T03:26:28.562Z</td>
  <td class="estado"><span class="badge fail">FAIL</span></td>
</tr>
<tr>
  <td class="idx">18</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">cancelar</td>
  <td class="time">2025-09-20T03:26:28.562Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr></tbody>
  </table>
</div>
<div class="intent-card">
  <div class="intent-header">
    <div class="intent-title">[11/40] deseo crear un cultivo <span class="intent-sub">(11/40)</span></div>
    <div class="chip ok">OK</div>
  </div>
  <table>
    <thead><tr>
      <th>#</th><th>Tipo</th><th>Texto</th><th>Timestamp (UTC)</th><th>Resultado</th>
    </tr></thead>
    <tbody><tr>
  <td class="idx">1</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">deseo crear un cultivo</td>
  <td class="time">2025-09-20T03:26:33.087Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">2</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Operación cancelada..</td>
  <td class="time">2025-09-20T03:26:35.124Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">3</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Nombre del cultivo.</td>
  <td class="time">2025-09-20T03:26:39.854Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">4</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">maíz</td>
  <td class="time">2025-09-20T03:26:39.869Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">5</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Nombre de la variedad.</td>
  <td class="time">2025-09-20T03:26:45.792Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">6</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">p 8660</td>
  <td class="time">2025-09-20T03:26:45.796Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">7</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Destino del cultivo.</td>
  <td class="time">2025-09-20T03:26:51.297Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">8</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">consumo</td>
  <td class="time">2025-09-20T03:26:51.303Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">9</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Marca del cultivo.</td>
  <td class="time">2025-09-20T03:26:56.627Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">10</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">marcax</td>
  <td class="time">2025-09-20T03:26:56.632Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">11</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Ya existe un cultivo con esta combinación de variedad, cliente, destino y marca..</td>
  <td class="time">2025-09-20T03:27:06.790Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">12</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">deseo crear un cultivo</td>
  <td class="time">2025-09-20T03:27:08.116Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">13</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Nombre del cultivo.</td>
  <td class="time">2025-09-20T03:27:15.474Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">14</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">maíz</td>
  <td class="time">2025-09-20T03:27:15.481Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">15</td>
  <td class="tipo recv">Recibido</td>
  <td class="texto">Nombre de la variedad.</td>
  <td class="time">2025-09-20T03:27:20.739Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr>
<tr>
  <td class="idx">16</td>
  <td class="tipo send">Enviado</td>
  <td class="texto">p 8660</td>
  <td class="time">2025-09-20T03:27:20.747Z</td>
  <td class="estado"><span class="badge ok">OK</span></td>
</tr></tbody>
  </table>
</div>
    <footer>Generado por ConversationReporter</footer>
  </div>
</body>
</html>

────────────────────────────────────────────────────────────────────────────────
ARCHIVO: ./test-results/conversations/index.html
────────────────────────────────────────────────────────────────────────────────

<!doctype html>
<html lang="es">
<head>
<meta charset="utf-8"/>
<title>Conversaciones - Reporte</title>
<style>
  body{font-family:system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,Cantarell,Arial,sans-serif;margin:24px;}
  h1{font-size:22px;margin:0 0 12px;}
  ul{line-height:1.8}
</style>
</head>
<body>
  <h1>Reportes de Conversación</h1>
  <p>Los archivos HTML se generan por cada test en esta carpeta.</p>
  <ul id="hint"><li>Abre cualquier <code>.html</code> para ver los pasos (enviado/recibido) con estado OK/FAIL.</li></ul>
</body>
</html>

────────────────────────────────────────────────────────────────────────────────
ARCHIVO: ./test-results/.last-run.json
────────────────────────────────────────────────────────────────────────────────

{
  "status": "failed",
  "failedTests": [
    "aa461b0042a475d55bb7-95442399076b60ba5e64"
  ]
}

────────────────────────────────────────────────────────────────────────────────
ARCHIVO: ./tests/asignar_precios_producto.spec.ts
────────────────────────────────────────────────────────────────────────────────

import { test, expect } from './_setup';

test('Asignar precios producto - Todos los intents', async ({ runAutoLoop, intents, conversation }) => {
  console.log('🧪 Iniciando test de asignar precios producto');
  const fails: string[] = [];
  const list = intents.asignarPreciosProducto;
  console.log(`📝 Total de intents a probar: ${list.length}`);

  for (let i = 0; i < list.length; i++) {
    const starter = list[i];
    console.log(`\n====== Intent ${i + 1}/${list.length}: "${starter}" ======`);
    conversation.logIntent(`[${i + 1}/${list.length}] ${starter}`, i + 1, list.length);

    const result = await runAutoLoop(starter, { resetChat: true });
    console.log('📊 Resultado:', result);
    
    if (!result.success) {
      fails.push(`Intent "${starter}" falló: ${result.reason}`);
    }
  }

  console.log(`✅ Completado: ${list.length - fails.length}/${list.length} intents exitosos`);
  if (fails.length > 0) {
    console.log('❌ Fallos:', fails);
  }
  expect.soft(fails, fails.join('\n')).toHaveLength(0);
});


────────────────────────────────────────────────────────────────────────────────
ARCHIVO: ./tests/consultar_campos.spec.ts
────────────────────────────────────────────────────────────────────────────────

import { test, expect } from './_setup';

test('Consultar campos sin planificar - Todos los intents', async ({ runAutoLoop, intents, conversation }) => {
  console.log('🧪 Iniciando test de consultar campos sin planificar');
  const fails: string[] = [];
  const list = intents.consultarCampos;
  console.log(`📝 Total de intents a probar: ${list.length}`);

  for (let i = 0; i < list.length; i++) {
    const starter = list[i];
    console.log(`\n====== Intent ${i + 1}/${list.length}: "${starter}" ======`);
    conversation.logIntent(`[${i + 1}/${list.length}] ${starter}`, i + 1, list.length);

    const result = await runAutoLoop(starter, { resetChat: true });
    console.log('📊 Resultado:', result);
    
    if (!result.success) {
      fails.push(`Intent "${starter}" falló: ${result.reason}`);
    }
  }

  console.log(`✅ Completado: ${list.length - fails.length}/${list.length} intents exitosos`);
  if (fails.length > 0) {
    console.log('❌ Fallos:', fails);
  }
  expect.soft(fails, fails.join('\n')).toHaveLength(0);
});


────────────────────────────────────────────────────────────────────────────────
ARCHIVO: ./tests/consultar_distribucion_cultivos.spec.ts
────────────────────────────────────────────────────────────────────────────────

import { test, expect } from './_setup';

test('Consultar distribución cultivos - Todos los intents', async ({ runAutoLoop, intents, conversation }) => {
  console.log('🧪 Iniciando test de consultar distribución cultivos');
  const fails: string[] = [];
  const list = intents.consultarDistribucion;
  console.log(`📝 Total de intents a probar: ${list.length}`);

  for (let i = 0; i < list.length; i++) {
    const starter = list[i];
    console.log(`\n====== Intent ${i + 1}/${list.length}: "${starter}" ======`);
    conversation.logIntent(`[${i + 1}/${list.length}] ${starter}`, i + 1, list.length);

    const result = await runAutoLoop(starter, { resetChat: true });
    console.log('📊 Resultado:', result);
    
    if (!result.success) {
      fails.push(`Intent "${starter}" falló: ${result.reason}`);
    }
  }

  console.log(`✅ Completado: ${list.length - fails.length}/${list.length} intents exitosos`);
  if (fails.length > 0) {
    console.log('❌ Fallos:', fails);
  }
  expect.soft(fails, fails.join('\n')).toHaveLength(0);
});


────────────────────────────────────────────────────────────────────────────────
ARCHIVO: ./tests/consultar_trabajos_hoy.spec.ts
────────────────────────────────────────────────────────────────────────────────

import { test, expect } from './_setup';

test('Consultar trabajos (hoy) - Todos los intents', async ({ runAutoLoop, intents, conversation }) => {
  console.log('🧪 Iniciando test de consultar trabajos (hoy)');
  const fails: string[] = [];
  const list = intents.consultarTrabajosHoy;
  console.log(`📝 Total de intents a probar: ${list.length}`);

  for (let i = 0; i < list.length; i++) {
    const starter = list[i];
    console.log(`\n====== Intent ${i + 1}/${list.length}: "${starter}" ======`);
    conversation.logIntent(`[${i + 1}/${list.length}] ${starter}`, i + 1, list.length);

    const result = await runAutoLoop(starter, { resetChat: true });
    console.log('📊 Resultado:', result);
    
    if (!result.success) {
      fails.push(`Intent "${starter}" falló: ${result.reason}`);
    }
  }

  console.log(`✅ Completado: ${list.length - fails.length}/${list.length} intents exitosos`);
  if (fails.length > 0) {
    console.log('❌ Fallos:', fails);
  }
  expect.soft(fails, fails.join('\n')).toHaveLength(0);
});


────────────────────────────────────────────────────────────────────────────────
ARCHIVO: ./tests/consultar_trabajos.spec.ts
────────────────────────────────────────────────────────────────────────────────

import { test, expect } from './_setup';

test('Consultar trabajos - Todos los intents', async ({ runAutoLoop, intents, conversation }) => {
  console.log('🧪 Iniciando test de consultar trabajos');
  const fails: string[] = [];
  const list = intents.consultarTrabajos;
  console.log(`📝 Total de intents a probar: ${list.length}`);

  for (let i = 0; i < list.length; i++) {
    const starter = list[i];
    console.log(`\n====== Intent ${i + 1}/${list.length}: "${starter}" ======`);
    conversation.logIntent(`[${i + 1}/${list.length}] ${starter}`, i + 1, list.length);

    const result = await runAutoLoop(starter, { resetChat: true });
    console.log('📊 Resultado:', result);
    
    if (!result.success) {
      fails.push(`Intent "${starter}" falló: ${result.reason}`);
    }
  }

  console.log(`✅ Completado: ${list.length - fails.length}/${list.length} intents exitosos`);
  if (fails.length > 0) {
    console.log('❌ Fallos:', fails);
  }
  expect.soft(fails, fails.join('\n')).toHaveLength(0);
});


────────────────────────────────────────────────────────────────────────────────
ARCHIVO: ./tests/conversation-reporter.ts
────────────────────────────────────────────────────────────────────────────────

import fs from 'node:fs';
import path from 'node:path';
import type { Reporter, TestCase, TestResult } from '@playwright/test/reporter';

type ConvEvent = { t: number; kind: 'send' | 'recv' | 'intent'; text: string; ok: boolean; meta?: any };
type ConvPayload = { title: string; events: ConvEvent[] };

function sanitize(name: string) {
  return name.replace(/[^\w\-]+/g, '_').slice(0, 150);
}
function esc(s: string) {
  return (s || '')
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;');
}

export default class ConversationReporter implements Reporter {
  private outputDir: string;

  constructor(options?: { outputDir?: string }) {
    this.outputDir =
      options?.outputDir || path.join(process.cwd(), 'test-results', 'conversations');
  }

  onBegin() {
    fs.mkdirSync(this.outputDir, { recursive: true });
    const indexPath = path.join(this.outputDir, 'index.html');
    if (!fs.existsSync(indexPath)) {
      fs.writeFileSync(indexPath, `<!doctype html>
<html lang="es">
<head>
<meta charset="utf-8"/>
<title>Conversaciones - Reporte</title>
<style>
  body{font-family:system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,Cantarell,Arial,sans-serif;margin:24px;}
  h1{font-size:22px;margin:0 0 12px;}
  ul{line-height:1.8}
</style>
</head>
<body>
  <h1>Reportes de Conversación</h1>
  <p>Los archivos HTML se generan por cada test en esta carpeta.</p>
  <ul id="hint"><li>Abre cualquier <code>.html</code> para ver los pasos (enviado/recibido) con estado OK/FAIL.</li></ul>
</body>
</html>`);
    }
  }

  async onTestEnd(test: TestCase, result: TestResult) {
    const att = result.attachments?.find(
      (a) => a.name === 'conversation' && a.contentType === 'application/json'
    );
    if (!att) return;

    let payload: ConvPayload | null = null;
    try {
      if (att.path) payload = JSON.parse(fs.readFileSync(att.path, 'utf-8'));
      else if (att.body) payload = JSON.parse(Buffer.from(att.body).toString('utf-8'));
    } catch { return; }
    if (!payload) return;

    const fileBase = `${sanitize(test.title)}.${sanitize(result.status)}`;
    const htmlPath = path.join(this.outputDir, `${fileBase}.html`);

    // Agrupar por INTENT (si no hay, un solo grupo)
    const groups: Array<{ label: string; idx: number; total: number; events: ConvEvent[] }> = [];
    let current: { label: string; idx: number; total: number; events: ConvEvent[] } | null = null;

    const totalIntentsInPayload = payload.events.filter(e => e.kind === 'intent').length;

    for (const ev of payload.events) {
      if (ev.kind === 'intent') {
        if (current) groups.push(current);
        const idx = (ev.meta?.idx ?? groups.length + 1);
        const total = (ev.meta?.total ?? totalIntentsInPayload) || (groups.length + 1);
        current = { label: ev.text || `Intent ${idx}`, idx, total, events: [] };
        continue;
      }
      if (!current) {
        current = { label: `Intent 1`, idx: 1, total: totalIntentsInPayload || 1, events: [] };
      }
      current.events.push(ev);
    }
    if (current) groups.push(current);
    if (groups.length === 0) {
      groups.push({ label: 'Intent 1', idx: 1, total: 1, events: payload.events || [] });
    }

    const groupSummaries = groups.map(g => {
      const failed = g.events.some(e => e.ok === false);
      const status = failed ? 'fail' : 'ok';
      return { ...g, status };
    });

    const overallTotal = payload.events?.length || 0;
    const passed = payload.events?.filter(e => e.ok).length || 0;
    const failed = overallTotal - passed;

    const groupsHtml = groupSummaries.map(g => {
      const rows = g.events.length
        ? g.events.map((ev, i) => {
            const iso = new Date(ev.t).toISOString();
            const tipo = ev.kind === 'send' ? 'Enviado' : ev.kind === 'recv' ? 'Recibido' : 'Intent';
            const badge = ev.ok
              ? '<span class="badge ok">OK</span>'
              : '<span class="badge fail">FAIL</span>';
            return `<tr>
  <td class="idx">${i + 1}</td>
  <td class="tipo ${ev.kind}">${tipo}</td>
  <td class="texto">${esc((ev.text || '').replace(/\s+/g, ' ').trim())}</td>
  <td class="time">${iso}</td>
  <td class="estado">${badge}</td>
</tr>`;
          }).join('\n')
        : '<tr><td colspan="5" style="color:#64748b">Sin eventos en este intent</td></tr>';

      const chipClass = g.status === 'ok' ? 'ok' : 'fail';
      const chipText = g.status === 'ok' ? 'OK' : 'FAIL';

      return `<div class="intent-card">
  <div class="intent-header">
    <div class="intent-title">${esc(g.label)} <span class="intent-sub">(${g.idx}/${g.total})</span></div>
    <div class="chip ${chipClass}">${chipText}</div>
  </div>
  <table>
    <thead><tr>
      <th>#</th><th>Tipo</th><th>Texto</th><th>Timestamp (UTC)</th><th>Resultado</th>
    </tr></thead>
    <tbody>${rows}</tbody>
  </table>
</div>`;
    }).join('\n');

    const html = `<!doctype html>
<html lang="es">
<head>
<meta charset="utf-8"/>
<title>${esc(test.title)} – ${result.status.toUpperCase()}</title>
<style>
  :root {
    --ok: #10b981;
    --fail: #ef4444;
    --send: #1d4ed8;
    --recv: #6b7280;
    --bg: #f8fafc;
    --card: #ffffff;
    --border: #e5e7eb;
  }
  html,body{background:var(--bg);}
  body{font-family:system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,Cantarell,Arial,sans-serif;margin:24px;color:#0f172a;}
  .card{background:var(--card);border:1px solid var(--border);border-radius:14px;box-shadow:0 1px 3px rgba(0,0,0,.05);padding:18px 20px;margin-bottom:18px;}
  h1{font-size:20px;margin:0 0 4px;}
  .meta{color:#475569;margin:0 0 12px;font-size:14px}
  .summary{display:flex;gap:12px;flex-wrap:wrap;margin:10px 0 0}
  .chip{border:1px solid var(--border);border-radius:999px;padding:6px 10px;font-size:13px;background:#fff}
  .chip.ok{border-color:var(--ok);color:var(--ok)}
  .chip.fail{border-color:var(--fail);color:var(--fail)}
  table{width:100%;border-collapse:collapse;margin-top:6px;font-size:14px}
  thead th{font-weight:600;text-align:left;color:#334155;border-bottom:1px solid var(--border);padding:8px}
  tbody td{border-top:1px solid var(--border);padding:8px;vertical-align:top}
  td.idx{width:44px;color:#64748b}
  td.tipo.send{color:var(--send);font-weight:600}
  td.tipo.recv{color:var(--recv);font-weight:600}
  td.tipo.intent{color:#7c3aed;font-weight:700}
  td.time{white-space:nowrap;color:#64748b}
  td.texto{white-space:pre-wrap;word-wrap:break-word}
  .badge{display:inline-block;border-radius:8px;padding:2px 8px;font-size:12px;border:1px solid}
  .badge.ok{border-color:var(--ok);color:var(--ok);background:rgba(16,185,129,.08)}
  .badge.fail{border-color:var(--fail);color:var(--fail);background:rgba(239,68,68,.08)}
  .intent-card{background:#fff;border:1px solid var(--border);border-radius:12px;padding:12px 14px;margin:14px 0}
  .intent-header{display:flex;justify-content:space-between;align-items:center;margin-bottom:6px}
  .intent-title{font-weight:700}
  .intent-sub{color:#64748b;font-weight:500;margin-left:6px}
  footer{margin-top:16px;color:#64748b;font-size:12px}
</style>
</head>
<body>
  <div class="card">
    <h1>${esc(test.title)}</h1>
    <div class="meta">
      <div><strong>Status:</strong> ${esc(result.status)}</div>
      <div><strong>Duración:</strong> ${Math.round(result.duration)} ms</div>
      <div><strong>Archivo:</strong> ${esc(test.location.file)}:${test.location.line}</div>
    </div>
    <div class="summary">
      <div class="chip">Eventos: ${overallTotal}</div>
      <div class="chip ok">OK: ${passed}</div>
      <div class="chip fail">FAIL: ${failed}</div>
      <div class="chip">Intents: ${groupSummaries.length}</div>
    </div>
  </div>

  <div class="card">
    <h2 style="margin:0 0 8px;font-size:16px">Conversación por intent</h2>
    ${groupsHtml}
    <footer>Generado por ConversationReporter</footer>
  </div>
</body>
</html>`;

    fs.writeFileSync(htmlPath, html, 'utf-8');
  }
}


────────────────────────────────────────────────────────────────────────────────
ARCHIVO: ./tests/crear_campana.spec.ts
────────────────────────────────────────────────────────────────────────────────

import { test, expect } from './_setup';

test('Crear campaña - Todos los intents', async ({ runAutoLoop, intents, conversation }) => {
  console.log('🧪 Iniciando test de crear campaña');
  const fails: string[] = [];
  const list = intents.crearCampana;
  console.log(`📝 Total de intents a probar: ${list.length}`);

  for (let i = 0; i < list.length; i++) {
    const starter = list[i];
    console.log(`\n====== Intent ${i + 1}/${list.length}: "${starter}" ======`);
    conversation.logIntent(`[${i + 1}/${list.length}] ${starter}`, i + 1, list.length);

    const result = await runAutoLoop(starter, { resetChat: true });
    console.log('📊 Resultado:', result);
    
    if (!result.success) {
      fails.push(`Intent "${starter}" falló: ${result.reason}`);
    }
  }

  console.log(`✅ Completado: ${list.length - fails.length}/${list.length} intents exitosos`);
  if (fails.length > 0) {
    console.log('❌ Fallos:', fails);
  }
  expect.soft(fails, fails.join('\n')).toHaveLength(0);
});


────────────────────────────────────────────────────────────────────────────────
ARCHIVO: ./tests/crear_cultivo.spec.ts
────────────────────────────────────────────────────────────────────────────────

import { test, expect } from './_setup';

// Deshabilita el riesgo de timeout del test: permite que termine todos los intents
test.setTimeout(24 * 60 * 60 * 1000); // 24 horas

test('Crear cultivo - Todos los intents', async ({ runAutoLoop, intents, conversation }) => {
  console.log('🧪 Iniciando test de crear cultivo con TODOS los intents: ', intents.crearCultivo);
  const fails: string[] = [];
  const list = intents.crearCultivo;
  console.log(`📝 Total de intents a probar: ${list.length}`);

  for (let i = 0; i < list.length; i++) {
    const starter = list[i];
    console.log(`\n====== Intent ${i + 1}/${list.length}: "${starter}" ======`);
    conversation.logIntent(`[${i + 1}/${list.length}] ${starter}`, i + 1, list.length);

    const result = await runAutoLoop(starter, { resetChat: true }); // 1 vez por intent
    console.log('📊 Resultado:', result);
    
    if (!result.success) {
      fails.push(`Intent "${starter}" falló: ${result.reason}`);
    }
  }

  // Evalúa al final para NO cortar la ejecución de intents intermedios
  console.log(`✅ Completado: ${list.length - fails.length}/${list.length} intents exitosos`);
  if (fails.length > 0) {
    console.log('❌ Fallos:', fails);
  }
  expect.soft(fails, fails.join('\n')).toHaveLength(0);
});


────────────────────────────────────────────────────────────────────────────────
ARCHIVO: ./tests/crear_fertilizante.spec.ts
────────────────────────────────────────────────────────────────────────────────

import { test, expect } from './_setup';

test('Crear fertilizante - Todos los intents', async ({ runAutoLoop, intents, conversation }) => {
  console.log('🧪 Iniciando test de crear fertilizante');
  const fails: string[] = [];
  const list = intents.crearFertilizante;
  console.log(`📝 Total de intents a probar: ${list.length}`);

  for (let i = 0; i < list.length; i++) {
    const starter = list[i];
    console.log(`\n====== Intent ${i + 1}/${list.length}: "${starter}" ======`);
    conversation.logIntent(`[${i + 1}/${list.length}] ${starter}`, i + 1, list.length);

    const result = await runAutoLoop(starter, { resetChat: true });
    console.log('📊 Resultado:', result);
    
    if (!result.success) {
      fails.push(`Intent "${starter}" falló: ${result.reason}`);
    }
  }

  console.log(`✅ Completado: ${list.length - fails.length}/${list.length} intents exitosos`);
  if (fails.length > 0) {
    console.log('❌ Fallos:', fails);
  }
  expect.soft(fails, fails.join('\n')).toHaveLength(0);
});


────────────────────────────────────────────────────────────────────────────────
ARCHIVO: ./tests/crear_fitosanitario.spec.ts
────────────────────────────────────────────────────────────────────────────────

import { test, expect } from './_setup';

test('Crear fitosanitario - Todos los intents', async ({ runAutoLoop, intents, conversation }) => {
  console.log('🧪 Iniciando test de crear fitosanitario');
  const fails: string[] = [];
  const list = intents.crearFitosanitario;
  console.log(`📝 Total de intents a probar: ${list.length}`);

  for (let i = 0; i < list.length; i++) {
    const starter = list[i];
    console.log(`\n====== Intent ${i + 1}/${list.length}: "${starter}" ======`);
    conversation.logIntent(`[${i + 1}/${list.length}] ${starter}`, i + 1, list.length);

    const result = await runAutoLoop(starter, { resetChat: true });
    console.log('📊 Resultado:', result);
    
    if (!result.success) {
      fails.push(`Intent "${starter}" falló: ${result.reason}`);
    }
  }

  console.log(`✅ Completado: ${list.length - fails.length}/${list.length} intents exitosos`);
  if (fails.length > 0) {
    console.log('❌ Fallos:', fails);
  }
  expect.soft(fails, fails.join('\n')).toHaveLength(0);
});


────────────────────────────────────────────────────────────────────────────────
ARCHIVO: ./tests/.env
────────────────────────────────────────────────────────────────────────────────

# Contacto de WhatsApp (Twilio)
CONTACT_NAME=Twilio
# Alternativas reconocidas automáticamente: Twilio, "+1 (415) 523-8886", 14155238886

# Navegador
HEADLESS=false
SESSION_DIR=~/.wapp-autoloop-session

# Comando específico a ejecutar (comentar para usar selección aleatoria)
SPECIFIC_COMMAND=crear cultivo

# Conjunto de comandos (idénticos al proyecto original)
CMD_LISTAR=listar cultivos
CMD_CREAR=crear cultivo
CMD_LISTAR_FERT=listar fertilizantes
CMD_CREAR_FERT=crear fertilizante
CMD_LISTAR_FITO=Listar productos químicos
CMD_CREAR_FITO=crear fitosanitario
CMD_CONSULTAR_CAMPOS=Consultar campos sin planificar
CMD_CONSULTAR_DISTRIBUCION=Consultar distribución cultivos
CMD_CREAR_CAMPANA=Crear campaña
CMD_CONSULTAR_TRABAJOS=Consultar trabajos
CMD_CONSULTAR_TRABAJOS_HOY=Consultar trabajos (hoy)
CMD_ASIGNAR_PRECIOS_PRODUCTO=Asignar precios producto
NOMBRE_BASE=Cultivo

# Comportamiento
# "Ya existe" SIEMPRE se considera error (FAIL) en el flujo y en el reporte.
TREAT_EXISTS_AS_OK=false

# ===== Intents por flujo durante los tests =====
INTENTS_CREAR_CULTIVO=["crear cultivo","añadir cultivo"]
INTENTS_LISTAR_CULTIVOS= listar cultivos | dame la lista de cultivos | listar cultivos variedad {variedad}

# Valor por defecto para placeholders
VAR_VARIEDAD=p 8660


────────────────────────────────────────────────────────────────────────────────
ARCHIVO: ./tests/listar_cultivos.spec.ts
────────────────────────────────────────────────────────────────────────────────

import { test, expect } from './_setup';

test('Listar cultivos - Todos los intents', async ({ runAutoLoop, intents, conversation }) => {
  console.log('🧪 Iniciando test de listar cultivos');
  const fails: string[] = [];
  const list = intents.listarCultivos;
  console.log(`📝 Total de intents a probar: ${list.length}`);

  for (let i = 0; i < list.length; i++) {
    const starter = list[i];
    console.log(`\n====== Intent ${i + 1}/${list.length}: "${starter}" ======`);
    conversation.logIntent(`[${i + 1}/${list.length}] ${starter}`, i + 1, list.length);

    const result = await runAutoLoop(starter, { resetChat: true });
    console.log('📊 Resultado:', result);
    
    if (!result.success) {
      fails.push(`Intent "${starter}" falló: ${result.reason}`);
    }
  }

  console.log(`✅ Completado: ${list.length - fails.length}/${list.length} intents exitosos`);
  if (fails.length > 0) {
    console.log('❌ Fallos:', fails);
  }
  expect.soft(fails, fails.join('\n')).toHaveLength(0);
});


────────────────────────────────────────────────────────────────────────────────
ARCHIVO: ./tests/listar_fertilizantes.spec.ts
────────────────────────────────────────────────────────────────────────────────

import { test, expect } from './_setup';

test('Listar fertilizantes - Todos los intents', async ({ runAutoLoop, intents, conversation }) => {
  console.log('🧪 Iniciando test de listar fertilizantes');
  const fails: string[] = [];
  const list = intents.listarFertilizantes;
  console.log(`📝 Total de intents a probar: ${list.length}`);

  for (let i = 0; i < list.length; i++) {
    const starter = list[i];
    console.log(`\n====== Intent ${i + 1}/${list.length}: "${starter}" ======`);
    conversation.logIntent(`[${i + 1}/${list.length}] ${starter}`, i + 1, list.length);

    const result = await runAutoLoop(starter, { resetChat: true });
    console.log('📊 Resultado:', result);
    
    if (!result.success) {
      fails.push(`Intent "${starter}" falló: ${result.reason}`);
    }
  }

  console.log(`✅ Completado: ${list.length - fails.length}/${list.length} intents exitosos`);
  if (fails.length > 0) {
    console.log('❌ Fallos:', fails);
  }
  expect.soft(fails, fails.join('\n')).toHaveLength(0);
});


────────────────────────────────────────────────────────────────────────────────
ARCHIVO: ./tests/listar_fitosanitarios.spec.ts
────────────────────────────────────────────────────────────────────────────────

import { test, expect } from './_setup';

test('Listar fitosanitarios - Todos los intents', async ({ runAutoLoop, intents, conversation }) => {
  console.log('🧪 Iniciando test de listar fitosanitarios');
  const fails: string[] = [];
  const list = intents.listarFitosanitarios;
  console.log(`📝 Total de intents a probar: ${list.length}`);

  for (let i = 0; i < list.length; i++) {
    const starter = list[i];
    console.log(`\n====== Intent ${i + 1}/${list.length}: "${starter}" ======`);
    conversation.logIntent(`[${i + 1}/${list.length}] ${starter}`, i + 1, list.length);

    const result = await runAutoLoop(starter, { resetChat: true });
    console.log('📊 Resultado:', result);
    
    if (!result.success) {
      fails.push(`Intent "${starter}" falló: ${result.reason}`);
    }
  }

  console.log(`✅ Completado: ${list.length - fails.length}/${list.length} intents exitosos`);
  if (fails.length > 0) {
    console.log('❌ Fallos:', fails);
  }
  expect.soft(fails, fails.join('\n')).toHaveLength(0);
});


────────────────────────────────────────────────────────────────────────────────
ARCHIVO: ./tests/_setup.ts
────────────────────────────────────────────────────────────────────────────────

import 'dotenv/config';
import { chromium, type BrowserContext, type Page, type Locator } from 'playwright';
import { test as base, expect } from '@playwright/test';

/* =========================
   Tipos para el reporte
   ========================= */
type ConvKind = 'send' | 'recv' | 'intent';
type ConversationLogger = {
  logSent: (text: string) => void;
  logReceived: (texts: string[]) => void;
  logRecvFailure: (reason: string) => void;
  logIntent: (label: string, idx?: number, total?: number) => void;
};

/* =========================
   Utilidades de placeholders
   ========================= */
function materialize(template: string, vars: Record<string, string>): string {
  return template.replace(/\{(\w+)\}/g, (_, k) => (k in vars ? vars[k] : `{${k}}`));
}
function materializeAll(list: ReadonlyArray<string>, vars: Record<string, string>): string[] {
  return list.map((t) => materialize(t, vars));
}

/* ==============
   Config general
   ============== */
const CFG = {
  contactName: process.env.CONTACT_NAME || 'Twilio',
  headless: (process.env.HEADLESS || 'false').toLowerCase() === 'true',
  sessionDir: (process.env.SESSION_DIR || '~/.wapp-autoloop-session').replace('~', process.env.HOME || ''),
  cmds: {
    listar: process.env.CMD_LISTAR || 'listar cultivos',
    crear: process.env.CMD_CREAR || 'crear cultivo',
    listarFert: process.env.CMD_LISTAR_FERT || 'listar fertilizantes',
    crearFert: process.env.CMD_CREAR_FERT || 'crear fertilizante',
    listarFito: process.env.CMD_LISTAR_FITO || 'Listar productos químicos',
    crearFito: process.env.CMD_CREAR_FITO || 'crear fitosanitario',
    consultarCampos: process.env.CMD_CONSULTAR_CAMPOS || 'Consultar campos sin planificar',
    consultarDistribucion: process.env.CMD_CONSULTAR_DISTRIBUCION || 'Consultar distribución cultivos',
    crearCampana: process.env.CMD_CREAR_CAMPANA || 'Crear campaña',
    consultarTrabajos: process.env.CMD_CONSULTAR_TRABAJOS || 'Consultar trabajos',
    consultarTrabajosHoy: process.env.CMD_CONSULTAR_TRABAJOS_HOY || 'Consultar trabajos (hoy)',
    asignarPreciosProducto: process.env.CMD_ASIGNAR_PRECIOS_PRODUCTO || 'Asignar precios producto'
  }
};

/* ==========================
   Variables (placeholders)
   ========================== */
// Defaults robustos que suelen “entrar” cuando no hay opciones
const VARS: Record<string, string> = {
  cultivo: process.env.VAR_CULTIVO || 'maíz',
  variedad: process.env.VAR_VARIEDAD || 'p 8660',
  destino: process.env.VAR_DESTINO || 'consumo',
  marca: process.env.VAR_MARCA || 'marcax',
  cliente: process.env.VAR_CLIENTE || 'AgroTalavera',
  campana: process.env.VAR_CAMPANA || 'campaña-test',
  granja: process.env.VAR_GRANJA || 'Finca La Vega',
  campo: process.env.VAR_CAMPO || 'campo 2',
  dosis: process.env.VAR_DOSIS || '100',

  // Precios
  productName: process.env.VAR_PRODUCT_NAME || 'Trigo Filón',
  price: process.env.VAR_PRICE || '340 €',
  priceDate: process.env.VAR_PRICE_DATE || 'hoy'
};

// Snapshot de valores por defecto para restaurar al inicio de cada intent
const DEFAULT_VARS: Readonly<Record<string, string>> = { ...VARS };

function resetVarsToDefaults() {
  for (const [k, v] of Object.entries(DEFAULT_VARS)) {
    setVar(k, v);
  }
}

export const setVar = (name: string, value: string) => {
  if (!name || !/^\w+$/.test(name)) throw new Error(`Nombre de variable inválido: "${name}"`);
  VARS[name] = String(value);
};
export const withVars = (vars: Record<string, string>) => {
  for (const [k, v] of Object.entries(vars)) setVar(k, String(v));
};

/* =====================
   Intents (por flujo)
   ===================== */
const INTENTS_TEMPLATES = {
  crearCultivo: [
    'crear cultivo',
    'añadir cultivo',
    'quiero crear un cultivo',
    'quiero registrar un cultivo',
    'registrar cultivo',
    'necesito crear un cultivo',
    'crear un nuevo cultivo',
    'quiero dar de alta un cultivo',
    'agrega un cultivo',
    'agrega un nuevo cultivo',
    'deseo crear un cultivo',
    'generar un cultivo',
    'crea un cultivo nuevo',
    'registra un cultivo',
    'quiero cargar un nuevo cultivo',
    'agregar cultivo',
    'registrar un cultivo nuevo',
    'me gustaría crear un cultivo nuevo',

    // Con variables
    'Luca, registra cultivo {cultivo}, variedad {variedad}, destino {destino}, marca {marca} y cliente {cliente}.',
    'Guardar cultivo {cultivo}, variedad {variedad}, destino {destino}, marca {marca}',
    'Luca, agregar el cultivo {cultivo}, variedad {variedad}, destino {destino}, marca {marca} para cliente {cliente}.',
    'Hola LUCA, registrar cultivo {cultivo}, variedad {variedad}, destino {destino}, marca {marca} para el cliente {cliente}',
    'Guardar cultivo {cultivo}, variedad {variedad}, destino {destino}, marca {marca} para el cliente {cliente}',
    'crear cultivo {cultivo}, variedad {variedad}, destino {destino}, marca {marca} con el cliente {cliente}',
    'Luca, agrega cultivo {cultivo}, variedad {variedad}, destino {destino}, marca {marca} cliente {cliente}',
    'Luca, agrega cultivo {cultivo}, variedad {variedad}, destino {destino}, marca {marca} con cliente {cliente}',
    'Luca regístrame cultivo {cultivo}, variedad {variedad}, destino {destino}, marca {marca} con cliente {cliente}',
    'Hola luca, quiero crear el cultivo {cultivo} con variedad {variedad} con destino {destino} y marca {marca} con el cliente {cliente}',
    'luca, me puedes registrar el cultivo {cultivo} con variedad {variedad} con destino {destino} y marca {marca} con el cliente {cliente}',
    'luca, quiero registrar el cultivo {cultivo}, variedad {variedad}, destino {destino}, marca {marca} con cliente {cliente}',
    'hola luca, agregame el cultivo {cultivo}, variedad {variedad}, destino {destino}, marca {marca} con cliente {cliente}',
    'Guardar cultivo {cultivo}, variedad {variedad}, destino {destino}, marca {marca} cliente {cliente}',
    'Agregame el cultivo {cultivo}, variedad {variedad}, destino {destino}, marca {marca}, cliente {cliente}',
    'Necesito registrar cultivo {cultivo}, variedad {variedad}, destino {destino}, marca {marca} con cliente {cliente}',
    'Guardar cultivo {cultivo}, variedad {variedad}, destino {destino}, marca {marca}, para el cliente {cliente}',
    'Luca, apúntame el cultivo {cultivo} variedad {variedad} destino {destino} marca {marca} con cliente {cliente}',
    'Luca registra cultivo {cultivo}, variedad {variedad}, destino {destino}, marca {marca}, cliente {cliente}',
    'Apunta cultivo {cultivo} con variedad {variedad}, destino {destino}, marca {marca} cliente {cliente}',
    'Luca agrega cultivo {cultivo}, variedad {variedad}, destino {destino}, marca {marca} para cliente {cliente}',
    'Hola luca, necesito registrar cultivo {cultivo}, variedad {variedad}, destino {destino}, marca {marca} con cliente {cliente}'
  ],

  listarCultivos: [
    'listar cultivos',
    'dame la lista de cultivos',
    'listar cultivos variedad {variedad}'
  ],

  crearFertilizante: ['crear fertilizante', 'añadir fertilizante'],
  listarFertilizantes: ['listar fertilizantes', 'lista de fertilizantes', 'dame los fertilizantes'],

  crearFitosanitario: ['crear fitosanitario', 'crear producto químico', 'añadir fitosanitario'],
  listarFitosanitarios: ['listar fitosanitarios', 'listar productos químicos', 'dame los productos químicos'],

  consultarCampos: ['consultar campos sin planificar', 'campos sin planificar', 'listar campos sin planificar'],
  consultarDistribucion: ['consultar distribución cultivos', 'distribución de cultivos', 'ver distribución de cultivos'],

  crearCampana: [
    'crear campaña',
    'añadir campaña',
    'Quiero crear campaña con {cultivo}',
    'Planifica {cultivo} variedad {variedad}',
    'Dar de alta en campaña {cultivo}',
    'Programa {cultivo} para esta campaña',
    'Apunta en la campaña {cultivo}',
    'Deja fijado en campaña {cultivo}',
    'Crear campaña con {cultivo}',
    'Asigna {cultivo} {variedad} en campaña',
    'Registra {cultivo} {variedad} para esta campaña',
    'Quiero planificar {cultivo} {variedad}',
    'Planificar {cultivo} para la campaña',
    'Dar de alta {cultivo} {variedad}',
    'Asigna {cultivo} {variedad} al {campo}',
    'Planifica {cultivo} en {granja} para {cliente}',
    'Programa {cultivo} en {campo} de {granja} para {cliente}',
    'Apunta en camp. {cultivo} en {granja}',
    'Asignar {cultivo} a la {campo} de {granja}',
    'Dar de alta {cultivo} en {campo} para {cliente}',
    'Planifica {cultivo} en {granja}',
    'Programa {cultivo} {variedad} para {cliente}',
    'Asigna {cultivo} en {campo} para {cliente}',
    'Deja {cultivo} en {granja} para {cliente}',
    'Apunta {cultivo} {variedad} en {campo} de {granja}',
    'Programa {cultivo} en {campo} de {granja} para {cliente}',
    'Planifica {cultivo} en {campo} de {granja}',
    'Registra {cultivo} en {campo}',
    'Crea campaña con {cultivo} {variedad} en {granja}, {campo} para {cliente}',
    'Planifica {cultivo} {variedad} en {granja} {campo}',
    'Perdona, para la campaña deja {cultivo} {variedad} en {campo} de {granja}, no en el 2',
    'q sea crear camp. de {cultivo} en {campo} de {granja}, xfa'
  ],

  consultarTrabajos: ['consultar trabajos', 'listar trabajos', 'qué trabajos hay'],
  consultarTrabajosHoy: ['consultar trabajos (hoy)', 'trabajos de hoy', 'qué trabajos hay hoy'],

  asignarPreciosProducto: [
    'asignar precios producto',
    'asignar precios a producto',
    'asignar precio a producto',
    'Hola Luca, asigna un precio de {price}/tonelada al {productName}',
    'Hola Luca, acabo de recibir una factura a {price}/tonelada el {productName} a fecha {priceDate}',
    'Establece {price} /tn para el {productName}',
    'Hola Luca, el {productName} queda a {price} por tonelada desde el {priceDate}',
    'Sube el precio del {productName} a {price} /tn',
    'Asigna para la {productName} un precio de {price} con fecha de hoy',
    'Coloca {price} /tonelada al {productName} a partir del {priceDate}',
    'Luca, el precio del {productName} será de {price} /tn desde hoy',
    'Para el {productName}, pon {price} euros por tonelada',
    'Ponme {price} euros/tn a la {productName} de este año',
    'Quiero que el precio de la {productName} sea de {price} a fecha {priceDate}',
    'El {productName} sube a {price} /tonelada desde el {priceDate}',
    'Fija para la {productName} un precio de {price} hoy mismo',
    'Quiero {price} euros por tonelada para la {productName} del {priceDate}',
    'Pon el {productName} a {price} /tn desde hoy',
    'Luca, actualiza el precio de la {productName} a {price}, fecha {priceDate}',
    'Para la {productName}, establece {price} /tonelada desde el {priceDate}',
    'Sube la {productName} a {price} /tn hoy',
    '{productName} a {price} /tonelada desde el {priceDate}',
    'Quiero asignar para el {productName} un precio de {price}',
    'Pon el {productName} a {price}, fecha {priceDate}',
    'Fija hoy mismo {price} euros por tonelada para la {productName}',
    'Asigna precio al {productName}',
    'Pon {price} al {productName}',
    'Registra el importe de {price} para {productName}',
    'Quiero dar de alta el precio del {productName} {priceDate}',
    'Actualiza a {price} el {productName} a fecha {priceDate}',
    'Apunta precio para {productName} {priceDate}',
    'Pónle {price} al {productName} para {cliente}',
    'Actualiza el valor del {productName} a {price} {priceDate}',
    'Registra {price} en {productName} con fecha {priceDate}',
    'Quiero fijar precio al {productName} para {cliente}',
    'Dar de alta {price} al {productName} a fecha {priceDate}',
    'Pon el coste del {productName} en {price}',
    'Apunta {price} para {productName} {priceDate}',
    'Actualiza el {productName} a {price} para {cliente}',
    'Registra precio de {productName}',
    'Quiero poner {price} al {productName} con fecha {priceDate}',
    'Da de alta el precio del {productName} {priceDate}',
    'Apunta el valor de {productName} para {cliente}',
    'Fija {price} al {productName}',
    'Actualízame el precio de {productName} a {price} con fecha {priceDate}',
    'Poner precio a {productName} {priceDate}',
    'Asigna {price} a {productName} para {cliente}',
    'Registra el importe del {productName} en {price} para {cliente}',
    'Apunta {price} a {productName}',
    'Actualiza a {price} el {productName} con fecha {priceDate}',
    'Perdona, corrige el precio del {productName} a {price} {priceDate}',
    'Me refería a asignar {price} al {productName}, no {price}',
    'Cambio: deja el {productName} en {price} con fecha {priceDate}',
    'Apúntame precio para {productName} {priceDate} xfa',
    'q pongas {price} al {productName} para {cliente}'
  ]
} as const;

const INTENTS = Object.fromEntries(
  Object.entries(INTENTS_TEMPLATES).map(([k, arr]) => [k, materializeAll(arr, VARS)])
) as Record<keyof typeof INTENTS_TEMPLATES, string[]>;

/* =====================
   Selectores y helpers
   ===================== */
const SELECTORS = {
  appReady: "[data-testid='pane-side'],[data-testid='chat-list'],[aria-label='Lista de chats'],[role='grid']",
  qrAny: "canvas[aria-label*='QR'],img[alt*='QR'],[data-testid='qr-code'],canvas[aria-label*=QR]",
  composer: "footer div[contenteditable='true'], div[contenteditable='true'][role='textbox']",
  messageIn: 'div.message-in',
  chatListItems: "[data-testid='chat-list'] [data-testid*='cell-frame']"
} as const;

const TWILIO_VARIANTS = (name: string) => [
  name,
  'Twilio',
  '+1 (415) 523-8886',
  '+14155238886',
  '415 523-8886',
  '4155238886'
];

// Enviar “cancelar” tras cada intent para resetear
const AUTO_CANCEL_AFTER_INTENT = true;
// Tiempo máximo por intent (ms). Lo dejamos en infinito para no cortar el intent antes de finalizar.
const MAX_INTENT_MS = Number.POSITIVE_INFINITY;

// Función auxiliar para terminar intent: enviar cancelar solo en caso de timeout
async function finishIntent(page: Page, conversation: ConversationLogger, isTimeout: boolean = false) {
  if (isTimeout && AUTO_CANCEL_AFTER_INTENT) {
    conversation.logSent('cancelar');
    await typeIntoComposer(page, 'cancelar');
    await page.waitForTimeout(500).catch(() => {});
  }
  // Limpiar pantalla después de cualquier finalización
  await clearChat(page).catch(() => {});
}

/* ==========================
   Reglas de palabra clave
   ========================== */
type Action =
  | { type: 'REPLY'; reply: string }
  | { type: 'END_OK' }
  | { type: 'END_ERR' }
  | { type: 'RETRY_EXISTS' }; // nuevo: reintentar si “Ya existe”

const KEYWORD_RULES: Array<{
  pattern: RegExp;
  action: Exclude<Action, { type: 'RETRY_EXISTS' }>;
  note?: string;
}> = [
  // ERRORES Y TERMINACIONES (para evitar bucles infinitos)
  { pattern: /No se encontró el cultivo|Cultivo no encontrado|no se pudo encontrar/i, action: { type: 'END_ERR' }, note: 'Cultivo no encontrado - termina' },
  { pattern: /Ha ocurrido un error|Error al procesar|no se pudo completar/i, action: { type: 'END_ERR' }, note: 'Error general - termina' },
  { pattern: /Gracias por usar|Hasta luego|Adiós/i, action: { type: 'END_OK' }, note: 'Despedida - termina' },
  
  // Listados OK
  { pattern: /Cultivo:/i, action: { type: 'END_OK' }, note: 'Lista de cultivos recibida' },

  // Confirmaciones de éxito
  { pattern: /campaña (cread[oa]) exitosamente/i, action: { type: 'END_OK' }, note: 'Campaña creada' },
  { pattern: /cultivo creado exitosamente/i, action: { type: 'END_OK' }, note: 'Cultivo creado' },
  { pattern: /fertilizante creado exitosamente/i, action: { type: 'END_OK' }, note: 'Fertilizante creado' },
  { pattern: /(fitosanitario|producto químico|producto) creado exitosamente/i, action: { type: 'END_OK' }, note: 'Fitosanitario/Producto creado' },
  { pattern: /(cread[oa]) exitosamente|éxito|confirmad[oa]/i, action: { type: 'END_OK' }, note: 'Éxito genérico' },

  // Éxitos de precios
  { pattern: /(precio (asignado|actualizado|registrado)|asigno un precio|precio fijado)/i, action: { type: 'END_OK' }, note: 'Precio asignado/actualizado' },

  // Errores explícitos
  { pattern: /(error|falla|inválid[oa]|no\s+válido)/i, action: { type: 'END_ERR' }, note: 'Error explícito' },

  // Peticiones de campos (una sola respuesta por turno)
  { pattern: /^Nombre del cultivo\.?$/i,        action: { type: 'REPLY', reply: '{cultivo}' },   note: 'Pide cultivo' },
  { pattern: /^Nombre de la variedad\.?$/i,     action: { type: 'REPLY', reply: '{variedad}' },  note: 'Pide variedad' },
  { pattern: /^Destino del cultivo\.?$/i,       action: { type: 'REPLY', reply: '{destino}' },   note: 'Pide destino' },
  { pattern: /^Marca del cultivo\.?$/i,         action: { type: 'REPLY', reply: '{marca}' },     note: 'Pide marca' },
  { pattern: /^(Nombre del cliente|Cliente)\.?$/i, action: { type: 'REPLY', reply: '{cliente}' }, note: 'Pide cliente' },
  { pattern: /^Nombre de la campaña\.?$/i,      action: { type: 'REPLY', reply: '{campana}' },   note: 'Pide campaña' },
  { pattern: /^Nombre de la granja\.?$/i,       action: { type: 'REPLY', reply: '{granja}' },    note: 'Pide granja' },
  { pattern: /^Nombre del campo\.?$/i,          action: { type: 'REPLY', reply: '{campo}' },     note: 'Pide campo' },
  // Dosis (corrección solicitada)
  {
    pattern: /\bDosis\b(?:\s+(?:planificada|recomendada))?(?:\s*\((?:Kg\/?H|Kg\/?Ha|kg\/?h|kg\/?ha|KG\/?H|KG\/?HA)\))?\s*\.?$/i,
    action: { type: 'REPLY', reply: '{dosis}' },
    note: 'Pide dosis → responder {dosis}'
  },

  // Asignar precios producto
  { pattern: /^(Producto|Nombre del producto|Nombre del artículo)\.?$/i, action: { type: 'REPLY', reply: '{productName}' }, note: 'Pide producto' },
  { pattern: /^(Precio|Importe|Valor|Coste|Costo)\.?$/i,                 action: { type: 'REPLY', reply: '{price}' },       note: 'Pide precio' },
  { pattern: /^Fecha( de vigencia| de precio)?\.?$/i,                    action: { type: 'REPLY', reply: '{priceDate}' },   note: 'Pide fecha precio' }
];

// prioridad: Opciones / Ya existe / luego reglas generales
function detectActionFrom(messages: string[]): Action | null {
  const joined = messages.join(' \n ');

  // 1) Opciones → responder SOLO una opción (la primera)
  if (/Opciones:/i.test(joined)) {
    const first = extractFirstOption(joined);
    return { type: 'REPLY', reply: first || '1' };
    // NOTA: aquí no evaluamos nada más para evitar doble respuesta.
  }

  // 2) Ya existe → reintento con variables aleatorias
  if (/ya existe/i.test(joined)) {
    return { type: 'RETRY_EXISTS' };
  }

  // 3) Reglas normales
  for (const rule of KEYWORD_RULES) {
    if (rule.pattern.test(joined)) {
      if (rule.action.type === 'REPLY') {
        return { type: 'REPLY', reply: materialize(rule.action.reply, VARS) };
      }
      return rule.action;
    }
  }
  return null;
}

function extractFirstOption(message: string): string | null {
  const optionsMatch = message.match(/Opciones:\s*([^.\n]+)/i);
  if (optionsMatch) {
    const raw = optionsMatch[1];
    const parts = raw.split(',').map(s => s.trim()).filter(Boolean);
    if (parts.length > 0) return parts[0];
  }
  if (/^\s*1\.\s+/m.test(message)) return '1';
  return null;
}

function randomToken(n = 6) {
  const chars = 'abcdefghijklmnopqrstuvwxyz0123456789';
  let result = '';
  for (let i = 0; i < n; i++) {
    result += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  // Agregar timestamp para mayor unicidad
  const timestamp = Date.now().toString(36).slice(-3);
  return result + timestamp;
}
function mutateOneVariableForRetry() {
  // Siempre mutar la marca (no mutar 'destino').
  const tok = randomToken(5);
  setVar('marca', `Yucasol-${tok}`);
}

/* ==========================
   Catálogo y randomización de cultivos
   ========================== */
const CROPS_POOL: Array<{ cultivo: string; variedades?: string[] }> = [
  { cultivo: 'trigo', variedades: ['filón', 'garbancera', 'renan', 'diva'] },
  { cultivo: 'cebada', variedades: ['planet', 'meseta', 'iskra'] },
  { cultivo: 'girasol', variedades: ['alto oleico', 'linoleico', 'pioneer'] },
  { cultivo: 'soja', variedades: ['amarilla', 'negra', 'asgrow 393'] },
  { cultivo: 'algodón', variedades: ['deltapine 1646', 'fibermax 9660'] },
  { cultivo: 'sorgo', variedades: ['p8333', 'p8422'] },
  { cultivo: 'arroz', variedades: ['bahía', 'senia', 'bomba'] },
  { cultivo: 'triticale', variedades: ['bogo', 'tritordeum'] },
  { cultivo: 'remolacha', variedades: ['kanzia', 'monalisa'] },
  { cultivo: 'patata', variedades: ['agria', 'monalisa', 'kennebec'] },
  { cultivo: 'colza', variedades: ['es capello', 'es imperio', 'lg austin'] },
  { cultivo: 'alfalfa', variedades: ['cuenca', 'saratoga', 'dormancy 9'] },
  { cultivo: 'avena', variedades: ['previsión', 'nevada'] },
  { cultivo: 'centeno', variedades: ['sangaste', 'petkus'] },
  { cultivo: 'maíz', variedades: ['p 8660', 'p1921', 'dkc 6664'] }
];

function pickRandomCrop(): { cultivo: string; variedad?: string } {
  const idx = Math.floor(Math.random() * CROPS_POOL.length);
  const item = CROPS_POOL[idx];
  const v = item.variedades && item.variedades.length
    ? item.variedades[Math.floor(Math.random() * item.variedades.length)]
    : undefined;
  return { cultivo: item.cultivo, variedad: v };
}

/* ==========================
   Playwright helpers
   ========================== */
function locator(page: Page, sel: keyof typeof SELECTORS): Locator {
  return page.locator(SELECTORS[sel]);
}

async function ensureLogin(page: Page, totalTimeout = 180_000) {
  await page.goto('https://web.whatsapp.com', { waitUntil: 'domcontentloaded' });
  const deadline = Date.now() + totalTimeout;
  while (Date.now() < deadline) {
    try { await page.waitForSelector(`${SELECTORS.appReady},${SELECTORS.qrAny}`, { timeout: 10_000 }); } catch { continue; }
    if ((await locator(page, 'appReady').count()) > 0) return;
    if ((await page.locator(SELECTORS.qrAny).count()) > 0) {
      try { await page.waitForSelector(SELECTORS.appReady, { timeout: 20_000 }); return; } catch {}
    }
  }
  throw new Error('No se detectó login ni QR válido a tiempo.');
}

async function openChat(page: Page, name: string) {
  await page.waitForSelector(SELECTORS.appReady, { timeout: 30_000 });
  for (const variant of TWILIO_VARIANTS(name)) {
    const chatItem = page.locator(`span[title='${variant}']`).first();
    if (await chatItem.isVisible().catch(() => false)) {
      await chatItem.click();
      await page.waitForSelector(SELECTORS.composer, { timeout: 10_000 });
      return;
    }
  }
  const chatItems = page.locator(SELECTORS.chatListItems);
  if ((await chatItems.count()) > 0) {
    await chatItems.first().click();
    await page.waitForSelector(SELECTORS.composer, { timeout: 10_000 });
    return;
  }
  throw new Error('No se pudo abrir ningún chat');
}

async function clearChat(page: Page) {
  const overflowBtn = page.locator('header div[role="button"]:has(span[data-icon="more-refreshed"])').last();
  await overflowBtn.click({ timeout: 5_000 }).catch(() => {});
  await page.waitForSelector('[role="menu"], [role="menuitem"], li:has-text("Vaciar chat"), li:has-text("Clear chat")', { timeout: 5_000 }).catch(() => {});
  const clearSelectors = [
    'div[role="button"]:has-text("Vaciar chat")',
    'li:has-text("Vaciar chat")',
    'div[role="button"]:has-text("Clear chat")',
    'li:has-text("Clear chat")'
  ];
  for (const s of clearSelectors) {
    const el = page.locator(s);
    if ((await el.count()) && (await el.first().isVisible().catch(() => false))) {
      await el.first().click();
      const conf = page.locator('div[role="button"]:has-text("Vaciar"), button:has-text("Vaciar"), div[role="button"]:has-text("Clear"), button:has-text("Clear")');
      if ((await conf.count()) > 0) await conf.first().click().catch(() => {});
      await page.waitForTimeout(800);
      return;
    }
  }
}

async function typeIntoComposer(page: Page, text: string) {
  await page.evaluate(() => {
    const prefer = document.querySelector("footer div[contenteditable='true']") as HTMLElement | null;
    const any =
      prefer ||
      (document.querySelector("div[contenteditable='true'][role='textbox']") as HTMLElement | null) ||
      (Array.from(document.querySelectorAll("div[contenteditable='true']")).pop() as HTMLElement | null);
    if (any) { (any as HTMLElement).focus(); (any as HTMLElement).click(); }
  });
  try { await page.keyboard.type(' ', { delay: 5 }); await page.keyboard.press('Backspace'); } catch {}
  await page.waitForTimeout(1000);
  await page.keyboard.type(text, { delay: 12 });
  await page.keyboard.press('Enter');
}

async function countIncoming(page: Page): Promise<number> {
  return locator(page, 'messageIn').count();
}

function sanitizeMessage(text: string): string {
  if (!text) return text;
  let out = text;
  const timePattern = /\b\d{1,2}:\d{2}\s*[\u00A0\s]?(?:a\.m\.|p\.m\.|a\.?\s*m\.?|p\.?\s*m\.?|AM|PM|am|pm)\.?\b/gi;
  out = out.replace(timePattern, '');
  out = out.replace(/\s*\b\d{1,2}:\d{2}\s*(?:AM|PM|am|pm|a\.m\.|p\.m\.|a\.?\s*m\.?|p\.?\s*m\.?)\.?\s*$/gi, '');
  out = out.replace(/\s{2,}/g, ' ').replace(/\s+([.,;:!?])/g, '$1').trim();
  return out;
}

async function extractBubbleText(el: Locator): Promise<string> {
  try {
    const spans = await el.locator("span.selectable-text span, span.selectable-text, span[dir='auto'], div[dir='auto']").all();
    const parts: string[] = [];
    for (const sp of spans) {
      try { const t = (await sp.innerText({ timeout: 1200 })).trim(); if (t && !parts.includes(t)) parts.push(t); } catch {}
    }
    return sanitizeMessage(parts.join(' ').trim());
  } catch { return ''; }
}

async function getNewIncomingAfter(page: Page, baseline: number): Promise<string[]> {
  const total = await countIncoming(page);
  const out: string[] = [];
  for (let i = baseline; i < total; i++) {
    try {
      const el = page.locator('div.message-in').nth(i);
      const text = await extractBubbleText(el);
      if (text) out.push(text);
    } catch {}
  }
  return out;
}

async function waitFirstResponse(page: Page, baseline: number, timeoutMs = 45_000): Promise<boolean> {
  const deadline = Date.now() + timeoutMs;
  while (Date.now() < deadline) {
    try {
      const curr = await countIncoming(page).catch(() => baseline);
      if (curr > baseline) return true;
      await page.waitForTimeout(200).catch(() => {});
    } catch {
      await page.waitForTimeout(200).catch(() => {});
    }
  }
  return false;
}

/* ==============
   Fixtures
   ============== */
export type WppFixtures = {
  context: BrowserContext;
  page: Page;
  resetChat: () => Promise<void>;
  sendAndWait: (message: string, extraWaitMs?: number) => Promise<string[]>;
  cmds: typeof CFG.cmds;
  intents: typeof INTENTS;
  runAutoLoop: (starter: string, opts?: { resetChat?: boolean }) => Promise<{ success: boolean; reason: string }>;
  setVar: (name: string, value: string) => void;
  withVars: (vars: Record<string, string>) => void;
  conversation: ConversationLogger;
};

export const test = base.extend<WppFixtures>({
  context: async ({}, use) => {
    const context = await chromium.launchPersistentContext(CFG.sessionDir, {
      headless: CFG.headless,
      args: ['--no-sandbox', '--disable-dev-shm-usage', '--window-size=1200,720']
    });
    await use(context);
    await context.close();
  },
  page: async ({ context }, use) => {
    const page = await context.newPage();
    await page.setViewportSize({ width: 1180, height: 640 });
    await ensureLogin(page);
  await openChat(page, CFG.contactName);
  await clearChat(page).catch(() => {}); // Limpiado reactivado
    await use(page);
  },
  conversation: async ({}, use, testInfo) => {
    const events: Array<{ t: number; kind: ConvKind; text: string; ok: boolean; meta?: any }> = [];
    const logger: ConversationLogger = {
      logSent: (text) => {
        console.log(`→ ${text}`);
        events.push({ t: Date.now(), kind: 'send', text, ok: true });
      },
      logReceived: (texts) => {
        texts.forEach((text) => {
          console.log(`← ${text}`);
          events.push({ t: Date.now(), kind: 'recv', text, ok: true });
        });
      },
      logRecvFailure: (reason) => {
        console.log(`✗ ${reason}`);
        events.push({ t: Date.now(), kind: 'recv', text: reason, ok: false });
      },
      logIntent: (label, idx, total) => {
        console.log(`\n[${idx}/${total}] ${label}`);
        events.push({ t: Date.now(), kind: 'intent', text: label, ok: true, meta: { idx, total } });
      }
    };
    await use(logger);
    await testInfo.attach('conversation', {
      contentType: 'application/json',
      body: JSON.stringify({ title: testInfo.title, events }, null, 2)
    });
  },
  resetChat: async ({ page }, use) => {
  await use(async () => { await clearChat(page).catch(() => {}); }); // Limpiado reactivado
  },
  sendAndWait: async ({ page, conversation }, use) => {
    const fn = async (message: string, extraWaitMs = 3000) => {
      const baseline = await countIncoming(page);
      conversation.logSent(message);
      await typeIntoComposer(page, message);

      let gotFirst = await waitFirstResponse(page, baseline, 45_000);
      if (!gotFirst) {
        await page.waitForTimeout(1500).catch(() => {});
        const fallbackMsgs = await getNewIncomingAfter(page, baseline);
        if (fallbackMsgs.length > 0) {
          conversation.logReceived(fallbackMsgs);
        } else {
          conversation.logRecvFailure('No hubo primera respuesta tras 45s');
        }
      }

      await page.waitForTimeout(extraWaitMs);
      let msgs = await getNewIncomingAfter(page, baseline);
      if (msgs.length === 0) {
        await page.waitForTimeout(2000).catch(() => {});
        msgs = await getNewIncomingAfter(page, baseline);
      }
      if (msgs.length === 0) {
        conversation.logRecvFailure('Sin mensajes nuevos tras espera adicional');
      } else {
        conversation.logReceived(msgs);
      }

      if (AUTO_CANCEL_AFTER_INTENT) {
        conversation.logSent('cancelar');
        await typeIntoComposer(page, 'cancelar');
        await page.waitForTimeout(250).catch(() => {});
      }
      return msgs;
    };
    await use(fn);
  },
  cmds: async ({}, use) => { await use(CFG.cmds); },
  intents: async ({}, use) => { await use(INTENTS); },
  setVar: async ({}, use) => { await use((name, value) => setVar(name, value)); },
  withVars: async ({}, use) => { await use((vars) => withVars(vars)); },
  runAutoLoop: async ({ page, conversation }, use) => {
    const fn = async (starter: string, opts?: { resetChat?: boolean }) => {
      try {
        let toSend = starter;
        let retriedOnExists = false;
        const deadline = Date.now() + MAX_INTENT_MS;
        
  if (opts?.resetChat ?? true) await clearChat(page).catch(() => {}); 
  // Restablecer variables al inicio del intent para tener un baseline consistente
  resetVarsToDefaults();

        // Elegir un cultivo aleatorio distinto de "maíz" la mayoría de veces
        const chosen = pickRandomCrop();
        const prevCultivo = VARS.cultivo;
        setVar('cultivo', chosen.cultivo);
        // Si la variedad está por defecto o coincide con maíz, ajustar una variedad compatible
        if (!VARS.variedad || VARS.variedad.toLowerCase() === DEFAULT_VARS.variedad.toLowerCase()) {
          if (chosen.variedad) setVar('variedad', chosen.variedad);
        }

        // Reescribe el starter si contiene el cultivo por defecto para usar el elegido
        if (toSend && /maíz|maiz/i.test(toSend)) {
          toSend = toSend.replace(/maíz|maiz/gi, chosen.cultivo);
        }

        // Bucle sin límite de iteraciones: solo se corta por END_OK/END_ERR o timeout
        // (deadline de tiempo por intent)
        // Reintentos ilimitados de respuestas
        // -------------------------------------------------
        // Nota: mantenemos esperas y guardas para evitar spins vacíos
        while (true) {
          if (Date.now() > deadline) {
            conversation.logRecvFailure('Timeout por intent (tiempo excedido)');
            await finishIntent(page, conversation, true); // timeout
            return { success: false, reason: 'No response from bot after total intent timeout' };
          }
          const baseline = await countIncoming(page);

          if (toSend && toSend.trim()) {
            conversation.logSent(toSend);
            await typeIntoComposer(page, toSend);
          }

          let newMessages: string[] = [];
          const gotFirst = await waitFirstResponse(page, baseline, 45_000);
          if (!gotFirst) {
            await page.waitForTimeout(1500).catch(() => {});
            newMessages = await getNewIncomingAfter(page, baseline).catch(() => []);
            if (newMessages.length === 0) {
              conversation.logRecvFailure('Sin respuesta tras 45s');
              await finishIntent(page, conversation, true); // timeout = true
              return { success: false, reason: 'No response from bot after 45s timeout' };
            }
          } else {
            newMessages = await getNewIncomingAfter(page, baseline).catch(() => []);
            if (newMessages.length === 0) {
              await page.waitForTimeout(2000).catch(() => {});
              newMessages = await getNewIncomingAfter(page, baseline).catch(() => []);
              if (newMessages.length === 0) {
                await page.waitForTimeout(1000).catch(() => {});
                newMessages = await getNewIncomingAfter(page, baseline).catch(() => []);
              }
            }
          }

          if (newMessages.length) conversation.logReceived(newMessages);
          else conversation.logRecvFailure('Sin mensajes');

          const action = detectActionFrom(newMessages);
          if (!action) { 
            toSend = ''; 
            continue; 
          }

          if (action.type === 'REPLY') {
            toSend = action.reply || '';
            continue;
          }

          if (action.type === 'RETRY_EXISTS') {
            if (!retriedOnExists) {
              retriedOnExists = true;
              mutateOneVariableForRetry();
              await finishIntent(page, conversation, false); // no timeout
              toSend = starter;
              continue;
            }
            await finishIntent(page, conversation, false); // no timeout
            return { success: false, reason: 'Flow ended with error' };
          }

          if (action.type === 'END_OK')  {
            await finishIntent(page, conversation, false); // no timeout
            return { success: true,  reason: 'Flow completed successfully' };
          }
          if (action.type === 'END_ERR') {
            await finishIntent(page, conversation, false); // no timeout
            return { success: false, reason: 'Flow ended with error' };
          }
        }
      } catch {
        conversation.logRecvFailure('Excepción durante el flujo');
        await finishIntent(page, conversation, false); // excepción no es timeout
        return { success: false, reason: 'Flow interrupted by page closure' };
      }
    };
    await use(fn);
  }
});

export { expect };


────────────────────────────────────────────────────────────────────────────────
ARCHIVO: ./tsconfig.json
────────────────────────────────────────────────────────────────────────────────

{
  "compilerOptions": {
    "target": "ES2020",
    "module": "ES2020",
    "moduleResolution": "node",
    "strict": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "outDir": "dist",
    "rootDir": "."
  },
  "include": ["tests/**/*.ts"],
  "exclude": ["node_modules", "dist"]
}

────────────────────────────────────────────────────────────────────────────────
ARCHIVO: ./.vscode/tasks.json
────────────────────────────────────────────────────────────────────────────────

{
	"version": "2.0.0",
	"tasks": [
		{
			"label": "Run crear_cultivo Playwright test",
			"type": "shell",
			"command": "npx playwright test tests/crear_cultivo.spec.ts",
			"group": "test"
		}
	]
}

================================================================================
FIN DEL PROYECTO - vie 19 sep 2025 22:38:30 -05
================================================================================
